export const modelsData:any = {
  "academy_courses": "module.exports = function (sequelize, DataTypes) {\n  const AcademyCourses = sequelize.define(\n    'academy_courses',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      academy_user_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'academy_users',\n          key: 'id',\n        },\n      },\n      course_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      title: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      access: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      user_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      description: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      final_price: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      course_image: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      gateway: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      transaction_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      billing_info: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      completed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      progress_rate: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      progress_analytics: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      progress_updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n\n  AcademyCourses.associate = (models) => {\n    AcademyCourses.belongsTo(models.academy_users, {\n      foreignKey: 'academy_user_id',\n      targetKey: 'id',\n    });\n  };\n\n  return AcademyCourses;\n};\n",
  "academy_users": "module.exports = function (sequelize, DataTypes) {\n  const AcademyUsers = sequelize.define(\n    'academy_users',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      user_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      username: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      role: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      is_admin: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      is_instructor: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      last_login: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n\n  AcademyUsers.associate = (models) => {\n    models.owners.hasOne(AcademyUsers, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    AcademyUsers.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n\n  return AcademyUsers;\n};\n",
  "accelerated_payouts_audit": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'accelerated_payouts_audits',\n    {\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      enabled: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n\n  return model;\n};\n",
  "admin_payment_histories": "'use strict';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const AdminPaymentHistories = sequelize.define(\n    'admin_payment_histories',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      status: {\n        type: DataTypes.STRING,\n      },\n      user: {\n        type: DataTypes.STRING,\n      },\n      automatic_decision: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      admin: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n\n  AdminPaymentHistories.associate = (models) => {\n    AdminPaymentHistories.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    models.owners.hasMany(AdminPaymentHistories, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n\n  return AdminPaymentHistories;\n};\n",
  "admins": "'use strict';\nmodule.exports = function (sequelize, DataTypes) {\n  const Admins = sequelize.define(\n    'admins',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        set(emailValue) {\n          this.setDataValue(\n            'email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      encrypted_password: DataTypes.STRING,\n      settings: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      reset_auth_time: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      department: {\n        type: DataTypes.ENUM('cx', 'engineering', 'product', 'operations'),\n        allowNull: true,\n      },\n      sign_in_attempts: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      last_login_attempt: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n  return Admins;\n};\n",
  "affiliate_codes": "module.exports = function (sequelize, DataTypes) {\n  const AffiliateCodes = sequelize.define(\n    'affiliate_codes',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      // when owner id is null code is not used\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      code: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: true,\n      },\n      affiliate_campaign: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      affiliate_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      price: {\n        type: DataTypes.DOUBLE,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'affiliate_codes',\n    },\n  );\n  AffiliateCodes.associate = (models) => {\n    AffiliateCodes.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n  return AffiliateCodes;\n};\n",
  "analytics_info": "import ACH_FEE_RESPONSIBILITY from '../../constants/ach_fee/achFeeResponsibility';\nimport PREMIUM_PRICE_SIGNUP from '../../constants/prices/premium_price_signup';\nimport { VIP_SUPPORT_ADDON_STATUSES } from '../../services/enums';\nimport calculateDeviceLoginToken from '../../utils/auth/calculate-device-login-token';\n\nmodule.exports = (sequelize, DataTypes) => {\n  return sequelize.define(\n    'analytics_info',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      user_type: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      user_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      onboarding_timestamp: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      onboarding_answer: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      onboarding_properties: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      mailing_address_address: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      mailing_address_zip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      mailing_address_state: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      mailing_address_unit: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      mailing_address_city: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      last_event_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      customer_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      first_property_creation_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      basic_reports: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      vip_support_active: {\n        type: DataTypes.ENUM(...Object.keys(VIP_SUPPORT_ADDON_STATUSES)),\n        allowNull: true,\n      },\n      phone: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      pro_reports: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      number_of_properties: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      current_screening_setting: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      e_sign_purchases: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      active_leads: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      active_leases: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      last_revenue_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      lead_questionnaire_received: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      reports_received: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      reports_requested: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      total_applicants: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      total_leads: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      total_leases: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      total_tenants: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      is_broker: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: false,\n      },\n      apply_now_url: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      apply_now_hidden: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      revenue: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: 0,\n      },\n      last_active: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      online_applications: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      standalone_screenings: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      rent_payments_initial_setup: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n      },\n      rent_payments_setup_started: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n      },\n      rent_payments_fraud_approved: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      deleted_by: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      deleted_reason: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      listings_marketing_online: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      first_rent_payment: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      rent_payments_received: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      charges_created: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      messages_sent: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      first_listing_marketing: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      lease_agreements_purchased: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      total_referrals: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      forms_pack: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      forms_annual: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n\n      odd_even: {\n        type: DataTypes.ENUM('odd', 'even'),\n        defaultValue: null,\n        allowNull: true,\n      },\n      marketing_visitor_forms_price_exp: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      expenses_added: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      first_expense_added: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      last_expense_added: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      landlord_signup_description: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      affiliate_source: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      device_login_token: {\n        // The device_login_token field is present in the Database for reporting purposes only,\n        // but it does not need to be fetched. This is why we calculate it dynamically as a virtual field.\n        type: DataTypes.VIRTUAL,\n        get() {\n          return calculateDeviceLoginToken(this.email);\n        },\n      },\n      risk_status: {\n        type: DataTypes.ENUM('HIGH', 'LOW'),\n        allowNull: true,\n      },\n      business_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      premium_created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      premium_period_end_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      premium_canceled: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      reihub_subscription_created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      reihub_subscription_renewed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      reihub_subscription_renewed_amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      reihub_subscription_period_ends_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      reihub_subscription_canceled_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      rental_process_stage: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: null,\n      },\n      application_fee: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: null,\n      },\n      lease_agreement_alacarte: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: 0,\n      },\n      lease_agreement_addendum_alacarte: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: 0,\n      },\n      lease_agreement_completed: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: 0,\n      },\n      lease_agreement_addendum_completed: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: 0,\n      },\n      lease_agreement_last_completed: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      lease_agreement_addendum_last_completed: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      premium_price_signup: {\n        type: DataTypes.ENUM(...Object.keys(PREMIUM_PRICE_SIGNUP)),\n        defaultValue: null,\n        allowNull: true,\n      },\n      sign_up_platform: {\n        type: DataTypes.ENUM('WEB', 'IOS', 'ANDROID'),\n        defaultValue: 'WEB',\n        allowNull: false,\n      },\n      mobile_app_login: {\n        type: DataTypes.ENUM('IOS', 'ANDROID'),\n        defaultValue: null,\n        allowNull: true,\n      },\n      last_active_mobile_app: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      mobile_data_tracking_allowed: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: true,\n      },\n      academy_signup: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      academy_fair_housing_for_landlords: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      academy_fair_housing_for_landlords_completed_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      academy_fair_housing_for_landlords_progress_rate: {\n        type: DataTypes.INTEGER,\n        defaultValue: null,\n        allowNull: true,\n      },\n      academy_accounting_for_landlords: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      academy_accounting_for_landlords_completed_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      academy_accounting_for_landlords_progress_rate: {\n        type: DataTypes.INTEGER,\n        defaultValue: null,\n        allowNull: true,\n      },\n      academy_turbotenant_onboarding: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      academy_turbotenant_onboarding_completed_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      academy_turbotenant_onboarding_progress_rate: {\n        type: DataTypes.INTEGER,\n        defaultValue: null,\n        allowNull: true,\n      },\n      academy_last_login: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      ownwell_ellgible: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      // NOTE: START: Columns for unsubscribe groups (mirrored from unsubscribe_groups table)\n      landlord_messages_from_renters: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_new_leads: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_leases: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_properties: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_applicants: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_check_ins_maintenance: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_promotions: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_platform_updates: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_thekey_weekly_newsletter: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_webinars_and_networking_events: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_feedback_opportunities: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      premium_status: {\n        type: DataTypes.STRING,\n        defaultValue: null,\n        allowNull: true,\n      },\n      // NOTE: END: Columns for unsubscribe groups (mirrored from unsubscribe_groups table)\n      tax_appeal_max_savings_estimate: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      tax_appeal_property_address: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      tax_appeal_property_state: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      tax_appeal_property_city: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      tax_appeal_property_zip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      app_fee_price_exp_group: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      app_fee_price_exp_test_group: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      app_fee_price_exp_premium_price: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      app_fee_price_exp_cookie_location: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      app_fee_price_exp_cookie_page_url: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      marketing_call_forwarding_numbers: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      marketing_call_forwarding_eligibility: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      payment_method_expiration_date: {\n        type: DataTypes.DATEONLY,\n        allowNull: true,\n      },\n      payment_method_expiration_mm_yyyy: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      payment_method_brand: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      payment_method_last_four: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      ownwell_savings: {\n        type: DataTypes.DOUBLE,\n        allowNull: true,\n      },\n      ownwell_tax_year: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      ownwell_property_address: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      ownwell_property_city: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      ownwell_property_state: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      ownwell_property_state_full: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      ownwell_property_zip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      ownwell_data_updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      multiple_bank_accounts: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: null,\n      },\n      ach_fee_responsibility: {\n        type: DataTypes.ENUM(...Object.keys(ACH_FEE_RESPONSIBILITY)),\n        allowNull: true,\n        defaultValue: ACH_FEE_RESPONSIBILITY.TENANT,\n      },\n      number_of_leasable_rentals: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      lease_agreement_price_experiment_202308: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      has_rooms: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: null,\n      },\n      is_multiunit: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: null,\n      },\n      questionnaire_create_lease_agreements_tool: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      questionnaire_create_lease_agreements_tool_comment: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      questionnaire_collect_rent_through: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      questionnaire_collect_rent_accepted_payment_methods: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      questionnaire_collect_rent_track_payments: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      rent_payments_preference: {\n        type: DataTypes.ENUM('ONLINE', 'OFFLINE'),\n        allowNull: true,\n      },\n      rent_payments_setup_feedback: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      plan_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: null,\n      },\n      stage_specific_cookie: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: null,\n      },\n      lula_eligible: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      lula_created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      lula_period_end_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      lula_canceled: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      lula_status: {\n        type: DataTypes.STRING,\n        defaultValue: null,\n        allowNull: true,\n      },\n      lula_maintenance_request_count: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      lula_maintenance_work_billed: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      all_maintenance_request_count: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      lula_maintenance_request_completed_count: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      // Disabling updated_at in this model, updating it accidentally could potentially trigger unwanted calls to segment. See more: https://turbotenant.atlassian.net/wiki/spaces/PRODUCT/pages/42827789/Analytics+Info\n      updatedAt: false,\n      underscored: true,\n      tableName: 'analytics_info',\n    },\n  );\n};\n",
  "api_users": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'api_users',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      active: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: true,\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: true,\n      },\n      api_key: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: true,\n      },\n      subscriptions: {\n        type: DataTypes.JSONB,\n        default: '[]',\n        allowNull: false,\n      },\n      callback_url: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'api_users',\n    },\n  );\n  return model;\n};\n",
  "attachments": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'attachments',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      content: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      rental_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'rental_requests',\n          key: 'id',\n        },\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: false,\n      tableName: 'attachments',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.rental_requests, {\n      foreignKey: 'rental_request_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "autopay_rules": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'autopay_rules',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      payment_request_rule_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'payment_request_rules',\n          key: 'id',\n        },\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      skip_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      last_payment_attempt: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      amount: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      days_before_due: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'autopay_rules',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.payment_request_rules, {\n      foreignKey: 'payment_request_rule_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    model.hasOne(models.rent_payments, {\n      foreignKey: 'autopay_rule_id',\n      sourceKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "batched_emails": "module.exports = function (sequelize, DataTypes) {\n  const BachedEmails = sequelize.define(\n    'batched_emails',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      email_function_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      data: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      status: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'batched_emails',\n    },\n  );\n  BachedEmails.associate = (models) => {\n    BachedEmails.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n  return BachedEmails;\n};\n",
  "call_forwarding_call_logs": "import PHONE_CALL_STATUS from '../../constants/phone_calls/status';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'call_forwarding_call_logs',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      call_forwarding_phone_number_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'call_forwarding_phone_numbers',\n          key: 'id',\n        },\n      },\n      call_sid: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      from: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      to: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      duration: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      end_time: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      price: {\n        type: DataTypes.DOUBLE,\n        allowNull: true,\n      },\n      status: {\n        type: DataTypes.ENUM(...Object.values(PHONE_CALL_STATUS)),\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'call_forwarding_call_logs',\n    },\n  );\n\n  model.associate = (models) => {\n    model.belongsTo(models.call_forwarding_phone_numbers, {\n      foreignKey: 'call_forwarding_phone_number_id',\n      targetKey: 'id',\n    });\n  };\n\n  return model;\n};\n",
  "call_forwarding_phone_numbers": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'call_forwarding_phone_numbers',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      phone_number: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      sid: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      released_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      unassigned_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'call_forwarding_phone_numbers',\n    },\n  );\n\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n  };\n\n  return model;\n};\n",
  "call_forwarding_sms_logs": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'call_forwarding_sms_logs',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      call_forwarding_phone_number_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'call_forwarding_phone_numbers',\n          key: 'id',\n        },\n      },\n      sms_sid: {\n        // Call ID from twilio\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      from: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      to: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true, // Null means not from LL\n      },\n      sms_content: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      tableName: 'call_forwarding_sms_logs',\n      timestamps: true,\n      underscored: true,\n    },\n  );\n\n  model.associate = (models) => {\n    model.belongsTo(models.call_forwarding_phone_numbers, {\n      foreignKey: 'call_forwarding_phone_number_id',\n      targetKey: 'id',\n    });\n  };\n\n  return model;\n};\n",
  "charge_attachments": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'charge_attachments',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      resource_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      resource_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      title: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      file_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'charge_attachments',\n    },\n  );\n  return model;\n};\n",
  "check_ins": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'check_ins',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      lease_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'leases',\n          key: 'id',\n        },\n      },\n      feedback: {\n        type: DataTypes.ENUM('GOOD', 'BAD'),\n        allowNull: false,\n      },\n      maintenance: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n      },\n      note: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'check_ins',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.leases, {\n      foreignKey: 'lease_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "checklists": "module.exports = (sequelize, DataTypes) => {\n  const Checklists = sequelize.define(\n    'checklists',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      lease_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'leases',\n          key: 'id',\n        },\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      type: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      completed: {\n        type: DataTypes.ARRAY(DataTypes.STRING),\n        defaultValue: [],\n      },\n      skipped: {\n        type: DataTypes.ARRAY(DataTypes.STRING),\n        defaultValue: [],\n      },\n      dismissed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'checklists',\n    },\n  );\n  Checklists.associate = (models) => {\n    Checklists.belongsTo(models.leases, {\n      foreignKey: 'lease_id',\n      targetKey: 'id',\n    });\n    Checklists.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n  return Checklists;\n};\n",
  "co_applicants": "module.exports = (sequelize, DataTypes) => {\n  const model = sequelize.define(\n    'co_applicants',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        set(emailValue) {\n          this.setDataValue(\n            'email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      type: {\n        type: DataTypes.ENUM('CO-SIGNER', 'TENANT'),\n        defaultValue: null,\n        allowNull: true,\n      },\n      rental_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'rental_requests',\n          key: 'id',\n        },\n      },\n    },\n    {\n      timestamps: false,\n      tableName: 'co_applicants',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.rental_requests, {\n      foreignKey: 'rental_request_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "cometchat_messages": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'cometchat_messages',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      message_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      conversation_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      receiver_type: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      sender: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      type: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      message: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      sent_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      delivered_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      read_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      tableName: 'cometchat_messages',\n      timestamps: true,\n      underscored: true,\n    },\n  );\n\n  return model;\n};\n",
  "consumers": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'consumers',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: true,\n      },\n      client_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: true,\n      },\n      client_secret: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'consumers',\n    },\n  );\n  return model;\n};\n",
  "contact_changes": "import CONTACT_CHANGES_TYPES from '../../constants/contact_changes/types';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const ContactChanges = sequelize.define(\n    'contact_changes',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      timestamp: {\n        type: DataTypes.DATE,\n        allowNull: true,\n        defaultValue: sequelize.NOW,\n      },\n      type: {\n        type: DataTypes.ENUM(Object.keys(CONTACT_CHANGES_TYPES)),\n        allowNull: false,\n      },\n      old_value: {\n        type: DataTypes.STRING,\n      },\n      new_value: {\n        type: DataTypes.STRING,\n      },\n      ip: {\n        type: DataTypes.STRING,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'contact_changes',\n    },\n  );\n\n  ContactChanges.associate = (models) => {\n    ContactChanges.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    ContactChanges.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n  };\n  return ContactChanges;\n};\n",
  "contacts": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'contacts',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      telephone: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      relationship: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      rental_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'rental_requests',\n          key: 'id',\n        },\n      },\n    },\n    {\n      timestamps: false,\n      underscored: true,\n      tableName: 'contacts',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.rental_requests, {\n      foreignKey: 'rental_request_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "conversation_messages": "'use strict';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const ConversationMessages = sequelize.define(\n    'conversation_messages',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      conversation_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'conversations',\n          key: 'id',\n        },\n      },\n      message_to: {\n        type: DataTypes.ENUM({\n          values: ['OWNER', 'RENTER'],\n        }),\n        allowNull: false,\n      },\n      message: {\n        type: DataTypes.TEXT,\n        defaultValue: '',\n      },\n      viewed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      metadata: {\n        type: DataTypes.JSON,\n        allowNull: true,\n        defaultValue: {},\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      bulk: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: null,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n  ConversationMessages.associate = (models) => {\n    ConversationMessages.belongsTo(models.conversations, {\n      foreignKey: 'conversation_id',\n      targetKey: 'id',\n    });\n  };\n  return ConversationMessages;\n};\n",
  "conversations": "'use strict';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const Conversations = sequelize.define(\n    'conversations',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      renter_dismissed_at: {\n        type: DataTypes.DATE,\n      },\n      owner_dismissed_at: {\n        type: DataTypes.DATE,\n      },\n      owner_unread_messages_count: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      renter_unread_messages_count: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      renter_last_message: {\n        type: DataTypes.JSONB,\n      },\n      renter_last_message_received: {\n        type: DataTypes.DATE,\n      },\n      owner_last_message: {\n        type: DataTypes.JSONB,\n      },\n      owner_last_message_received: {\n        type: DataTypes.DATE,\n      },\n      last_message_sent_at: {\n        type: DataTypes.DATE,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      blocked_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n  Conversations.associate = (models) => {\n    Conversations.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    Conversations.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    Conversations.hasMany(models.conversation_messages, {\n      foreignKey: 'conversation_id',\n      sourceKey: 'id',\n    });\n  };\n  return Conversations;\n};\n",
  "credit_checks": "import SCREENING_REPORT_API_TYPE from '../../constants/transunion_shareable/screening_report_api_type';\nimport {\n  decryptWithSaltAndIV,\n  encryptWithSaltAndIV,\n} from '../../services/crypto.service';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const CreditChecks = sequelize.define(\n    'credit_checks',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      authentication_token: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      rental_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      encrypted_report: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      requested: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      report_received: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      reminder_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      encrypted_report_salt: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      encrypted_report_iv: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      declined: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      pull_attempts: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: 0,\n      },\n      request_accepted: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      instant: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      type: {\n        type: DataTypes.ENUM(...Object.keys(SCREENING_REPORT_API_TYPE)),\n        allowNull: true,\n        defaultValue: SCREENING_REPORT_API_TYPE.TRANSUNION_SHAREABLE,\n      },\n      screening_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      screening_request_renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      bundle_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      report: {\n        type: DataTypes.VIRTUAL,\n        get() {\n          if (\n            !this ||\n            !this.encrypted_report ||\n            !this.encrypted_report_iv ||\n            !this.encrypted_report_salt\n          ) {\n            return null;\n          }\n          try {\n            return decryptWithSaltAndIV(\n              this.encrypted_report,\n              this.encrypted_report_iv,\n              this.encrypted_report_salt,\n            );\n          } catch (err) {\n            return null;\n          }\n        },\n        set(value) {\n          if (!value) {\n            this.setDataValue('encrypted_report', null);\n            this.setDataValue('encrypted_report_iv', null);\n            this.setDataValue('encrypted_report_salt', null);\n            return;\n          }\n          const enc = encryptWithSaltAndIV(value);\n          this.setDataValue('encrypted_report', enc.encrypted);\n          this.setDataValue('encrypted_report_iv', enc.iv);\n          this.setDataValue('encrypted_report_salt', enc.salt);\n        },\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'credit_checks',\n    },\n  );\n  CreditChecks.associate = (models) => {\n    CreditChecks.belongsTo(models.rental_requests, {\n      foreignKey: 'rental_request_id',\n      targetKey: 'id',\n    });\n    CreditChecks.hasMany(models.identity_verifications, {\n      foreignKey: 'credit_check_id',\n      sourceKey: 'id',\n    });\n  };\n  return CreditChecks;\n};\n",
  "custom_pre_screener_answers": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'custom_pre_screener_answers',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      leads_questions_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'leads_questions',\n          key: 'id',\n        },\n      },\n      question_answered_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'custom_pre_screener_questions',\n          key: 'id',\n        },\n      },\n      answer: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      question_answered: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'custom_pre_screener_answers',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.leads_questions, {\n      foreignKey: 'leads_questions_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.custom_pre_screener_questions, {\n      foreignKey: 'question_answered_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "custom_pre_screener_questions": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'custom_pre_screener_questions',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      question: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'custom_pre_screener_questions',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    model.hasMany(models.custom_pre_screener_answers, {\n      foreignKey: 'question_answered_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "documents": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'documents',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      document_api_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      identity_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'identities',\n          key: 'id',\n        },\n      },\n      document_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      status: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      base_document_api_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      error_message: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: false,\n      tableName: 'documents',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.identities, {\n      foreignKey: 'identity_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "eat_the_fee_audit": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'eat_the_fee_audits',\n    {\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      enabled: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n\n  return model;\n};\n",
  "employments": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'employments',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      employer: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      occupation: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      location: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      contact_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      contact_telephone: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      monthly_income: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      current: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      start_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      end_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      rental_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: false,\n      tableName: 'employments',\n      setterMethods: {\n        monthly_income(value) {\n          this.setDataValue(\n            'monthly_income',\n            value ? parseInt(value, 10) : null,\n          );\n        },\n      },\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.rental_requests, {\n      foreignKey: 'rental_request_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "expense_documents": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'expense_documents',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      expense_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'expenses',\n          key: 'id',\n        },\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      title: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'expense_documents',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.expenses, {\n      foreignKey: 'expense_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "expenses": "import { ExpenseCategoryEnum } from '../../enums/ExpenseCategoryEnum';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'expenses',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      // this was added to facilitate queries and avoid joining extra tables\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      date_paid: {\n        type: DataTypes.DATEONLY,\n        allowNull: false,\n      },\n      amount_paid: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n      category: {\n        type: DataTypes.ENUM(Object.keys(ExpenseCategoryEnum)),\n        allowNull: false,\n      },\n      description: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      notes: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'expenses',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    model.hasMany(models.expense_documents, {\n      foreignKey: 'expense_id',\n      sourceKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "flaggings": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'flaggings',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      comments: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        set(emailValue) {\n          this.setDataValue(\n            'email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      reason: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n    },\n    {\n      createdAt: 'created_at',\n      updatedAt: 'updated_at',\n      timestamps: true,\n      tableName: 'flaggings',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "forms": "import { FORMS_CATEGORIES } from '../../constants/FORMS_CATEGORIES';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'forms',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      title: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      description: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      category: {\n        type: DataTypes.ENUM(Object.keys(FORMS_CATEGORIES)),\n        allowNull: false,\n      },\n      url: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      doc_type: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      display_order: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        unique: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'forms',\n    },\n  );\n\n  return model;\n};\n",
  "ga_agg": "'use strict';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const GoogleAnalyitics = sequelize.define(\n    'ga_agg',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      date: {\n        type: DataTypes.DATE,\n      },\n      view_id: DataTypes.INTEGER,\n      owner_id: DataTypes.INTEGER,\n      session_type: DataTypes.STRING,\n      owner_type: DataTypes.STRING,\n      session_user_type: DataTypes.STRING,\n      user_type: DataTypes.STRING,\n      source: DataTypes.STRING,\n      medium: DataTypes.STRING,\n      campaign: DataTypes.STRING,\n      full_referrer: DataTypes.STRING,\n      landing_page_path: DataTypes.STRING,\n      device_category: DataTypes.STRING,\n      ad_group: DataTypes.STRING,\n      keyword: DataTypes.STRING,\n      sessions: DataTypes.INTEGER,\n      event_owner_customer: DataTypes.INTEGER,\n      event_owner_signup: DataTypes.INTEGER,\n      bounces: DataTypes.INTEGER,\n      session_duration: DataTypes.FLOAT,\n      pageviews: DataTypes.INTEGER,\n      unique_pageviews: DataTypes.FLOAT,\n      hits: DataTypes.INTEGER,\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'ga_agg',\n    },\n  );\n\n  return GoogleAnalyitics;\n};\n",
  "google_analytics": "'use strict';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const GoogleAnalyitics = sequelize.define(\n    'google_analytics',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      date: {\n        type: DataTypes.DATE,\n      },\n      owner_id: DataTypes.INTEGER,\n      owner_type: DataTypes.STRING,\n      session_type: DataTypes.STRING,\n      source_medium: DataTypes.STRING,\n      campaign: DataTypes.STRING,\n      keyword: DataTypes.STRING,\n      event_owner_customer: DataTypes.INTEGER,\n      event_owner_signup: DataTypes.INTEGER,\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n\n  return GoogleAnalyitics;\n};\n",
  "identities": "module.exports = (sequelize, DataTypes) => {\n  const Identities = sequelize.define(\n    'identities',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      identity_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      oauth_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      oauth_expires_at: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      refresh_expires_at: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      identifiable_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      identifiable_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      source_lead_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n    },\n    {\n      tableName: 'identities',\n      timestamps: true,\n      underscored: true,\n    },\n  );\n  Identities.associate = (models) => {\n    models.identities.hasMany(models.documents, {\n      foreignKey: 'identity_id',\n      sourceKey: 'id',\n    });\n  };\n  return Identities;\n};\n",
  "identity_verifications": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'identity_verifications',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      credit_check_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'credit_checks',\n          key: 'id',\n        },\n      },\n      exam_json: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      expired_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      passed: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      error_message: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'identity_verifications',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.credit_checks, {\n      foreignKey: 'credit_check_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "income_sources": "module.exports = (sequelize, DataTypes) => {\n  const model = sequelize.define(\n    'income_sources',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      monthly_income: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      source: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      rental_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'rental_requests',\n          key: 'id',\n        },\n      },\n    },\n    {\n      timestamps: false,\n      tableName: 'income_sources',\n      setterMethods: {\n        monthly_income(value) {\n          this.setDataValue(\n            'monthly_income',\n            value ? parseInt(value, 10) : null,\n          );\n        },\n      },\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.rental_requests, {\n      foreignKey: 'rental_request_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "index": "import commentPlugin from '@caratlane/sqc';\nimport fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\n\nconst basename = path.basename(module.filename);\nimport generalConfig from '../../config';\n\nconst config = generalConfig.db;\n\nconst logging = {};\n\nif (!generalConfig.sequelizeLogging || process.env.NODE_ENV === 'test') {\n  logging.logging = false;\n}\n\nconst loadDatabaseClient = (config) => {\n  const db = {};\n  let poolOptions;\n  if (config.pool) {\n    try {\n      const opts = JSON.parse(config.pool);\n      poolOptions = { pool: opts };\n    } catch (e) {\n      console.log('FAILED TO PARSE POOL OPTIONS');\n      poolOptions = {};\n    }\n  }\n  /**\n   * sequelize-cli uses the config directly from settings.ts, so in order\n   * to keep the config consistent, we shouldn't harcode it in here,\n   * we should always use the config from settings file\n   */\n  let sequelize = new Sequelize(config.databaseUrl, {\n    ssl: config.ssl,\n    dialect: config.dialect || 'postgres',\n    dialectOptions: config.dialectOptions || {},\n    ...logging,\n    define: {\n      underscored: true,\n      timestamps: true,\n      createdAt: 'created_at',\n      updatedAt: 'updated_at',\n    },\n    ...poolOptions,\n  });\n\n  // Attach the query commenter middleware\n  sequelize = commentPlugin(sequelize);\n\n  fs.readdirSync(__dirname)\n    .filter(\n      (file) =>\n        file.indexOf('.') !== 0 &&\n        file !== basename &&\n        file.slice(-3) === '.js' &&\n        !/\\.(test|espec|spec)\\.js$/.test(file),\n    )\n    .forEach((file) => {\n      const fullFilePath = path.join(__dirname, file);\n      const model = require(fullFilePath)(sequelize, Sequelize);\n      db[model.name] = model;\n    });\n\n  Object.keys(db).forEach((modelName) => {\n    if (db[modelName].associate) {\n      db[modelName].associate(db);\n    }\n  });\n\n  db.sequelize = sequelize;\n  db.Sequelize = Sequelize;\n  return db;\n};\n\nconst defaultClient = loadDatabaseClient(config);\nconst sequelize = defaultClient.sequelize;\n\nexport { loadDatabaseClient, sequelize, Sequelize };\n\nexport default defaultClient;\n",
  "landlord_payments": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'landlord_payments',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      stripe_subscription_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'stripe_subscriptions',\n          key: 'id',\n        },\n      },\n      charge_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      payment_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      source: {\n        type: DataTypes.JSONB,\n        defaultValue: {},\n      },\n      metadata: {\n        type: DataTypes.JSONB,\n        defaultValue: {},\n      },\n      amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      token: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      promo_code: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: null,\n      },\n      amount_off: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: null,\n      },\n      percent_off: {\n        type: DataTypes.FLOAT,\n        allowNull: true,\n        defaultValue: null,\n      },\n      referred_by: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: null,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'landlord_payments',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.stripe_subscriptions, {\n      foreignKey: 'stripe_subscription_id',\n      targetKey: 'id',\n    });\n    model.hasMany(models.signature_requests, {\n      foreignKey: 'landlord_payment_id',\n      sourceKey: 'id',\n    });\n    model.hasMany(models.lease_agreements, {\n      foreignKey: 'landlord_payment_id',\n      sourceKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "landlord_references": "module.exports = function (sequelize, DataTypes) {\n  const LandlordReferences = sequelize.define(\n    'landlord_references',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      not_responding: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      residence_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'residences',\n          key: 'id',\n        },\n      },\n      lease_agreement: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      lease_agreement_explain: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      pet: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      pet_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      pets_allowed: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      smoke: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      smoking_allowed: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      noise_disturbances: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      noise_disturbances_explain: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      clean_maintained: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      clean_maintained_explain: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      leave_early: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      leave_early_explain: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      violate_lease: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      violate_lease_explain: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      rent_amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      payment_on_time: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      late_payment_frequency: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      move_out_notice: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      move_out_undamaged: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      move_out_undamaged_explain: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      move_out_deduct: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      move_out_deduct_amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      move_out_deduct_explain: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      move_out_debt: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      move_out_debt_amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      move_out_debt_explain: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      overall: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      overall_explain: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      agreed_tos_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'landlord_references',\n      setterMethods: {\n        lease_agreement(value) {\n          this.setDataValue(\n            'lease_agreement',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        pet(value) {\n          this.setDataValue('pet', typeof value === 'boolean' ? value : null);\n        },\n        pets_allowed(value) {\n          this.setDataValue(\n            'pets_allowed',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        smoke(value) {\n          this.setDataValue('smoke', typeof value === 'boolean' ? value : null);\n        },\n        smoking_allowed(value) {\n          this.setDataValue(\n            'smoking_allowed',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        noise_disturbances(value) {\n          this.setDataValue(\n            'noise_disturbances',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        clean_maintained(value) {\n          this.setDataValue(\n            'clean_maintained',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        leave_early(value) {\n          this.setDataValue(\n            'leave_early',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        violate_lease(value) {\n          this.setDataValue(\n            'violate_lease',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        payment_on_time(value) {\n          this.setDataValue(\n            'payment_on_time',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        move_out_notice(value) {\n          this.setDataValue(\n            'move_out_notice',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        move_out_undamaged(value) {\n          this.setDataValue(\n            'move_out_undamaged',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        move_out_deduct(value) {\n          this.setDataValue(\n            'move_out_deduct',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        move_out_debt(value) {\n          this.setDataValue(\n            'move_out_debt',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        overall(value) {\n          this.setDataValue(\n            'overall',\n            typeof value === 'boolean' ? value : null,\n          );\n        },\n        rent_amount(value) {\n          this.setDataValue('rent_amount', value ? parseInt(value, 10) : null);\n        },\n        move_out_deduct_amount(value) {\n          this.setDataValue(\n            'move_out_deduct_amount',\n            value ? parseInt(value, 10) : null,\n          );\n        },\n        move_out_debt_amount(value) {\n          this.setDataValue(\n            'move_out_debt_amount',\n            value ? parseInt(value, 10) : null,\n          );\n        },\n      },\n    },\n  );\n  LandlordReferences.associate = (models) => {\n    LandlordReferences.belongsTo(models.residences, {\n      foreignKey: 'residence_id',\n      targetKey: 'id',\n    });\n  };\n  return LandlordReferences;\n};\n",
  "leads": "('use strict');\nimport config from '../../config';\nimport QUESTIONNAIRE_LAST_TYPE from '../../constants/leads/questionnaire_last_type';\nimport {\n  isNewMessagingEnabled,\n  onLeadCreated,\n  onLeadUpdated,\n} from '../../services/cometchat.service';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const Leads = sequelize.define(\n    'leads',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      first_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      last_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        set(emailValue) {\n          this.setDataValue(\n            'email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      phone: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      source: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      status: {\n        type: DataTypes.ENUM(\n          'NEW',\n          'VIEWED',\n          'CONTACTED',\n          'INVITED',\n          'APPLIED',\n        ),\n        allowNull: false,\n        defaultValue: 'NEW',\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      comments: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      move_in_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      log_information: {\n        type: DataTypes.JSONB,\n        defaultValue: [],\n        allowNull: false,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      questionnaire_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      questionnaire_reminder_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      questionnaire_last_type: {\n        type: DataTypes.ENUM(...Object.keys(QUESTIONNAIRE_LAST_TYPE)),\n        allowNull: true,\n      },\n      archived_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      invitation_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      source_lead_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      agreed_tos_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      mechanism: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      invitation_reminder_4hrs_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      invitation_reminder_24hrs_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n  Leads.associate = (models) => {\n    Leads.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n    Leads.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    Leads.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    Leads.hasOne(models.leads_questions, {\n      foreignKey: 'lead_id',\n      sourceKey: 'id',\n    });\n  };\n  Leads.addHook('afterCreate', async (lead) => {\n    if (config.isTestMode || !isNewMessagingEnabled()) return;\n    await onLeadCreated(lead);\n  });\n  Leads.addHook('afterUpdate', async (lead) => {\n    if (config.isTestMode || !isNewMessagingEnabled()) return;\n    await onLeadUpdated(lead);\n  });\n  return Leads;\n};\n",
  "leads_questions": "'use strict';\nimport ESTIMATED_CREDIT_SCORE from '../../constants/leads/estimated_credit_score';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const model = sequelize.define(\n    'leads_questions',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      lead_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'leads',\n          key: 'id',\n        },\n      },\n      first_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      last_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        set(emailValue) {\n          this.setDataValue(\n            'email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      phone: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      employment_status: {\n        type: DataTypes.JSONB,\n        defaultValue: [],\n      },\n      employment_other: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      income: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      estimated_credit_score: {\n        type: DataTypes.ENUM(...Object.keys(ESTIMATED_CREDIT_SCORE)),\n        allowNull: true,\n      },\n      move_in_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      people_living: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      has_pets: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      pet_description: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      smokes: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      questions_for_landlord: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      virtual_showing: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      how_did_you_hear: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n  model.associate = (models) => {\n    model.hasMany(models.custom_pre_screener_answers, {\n      foreignKey: 'leads_questions_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.leads, {\n      foreignKey: 'lead_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "lease_agreements": "import get from 'lodash.get';\n\nimport LEASE_END_ACTIONS from '../../constants/lease_agreement/lease-end-actions';\nimport SECTION_STATUS from '../../constants/lease_agreement/section_status';\nimport SMOKING_POLICY from '../../constants/lease_agreement/smoking-policy';\nimport STATUSES from '../../constants/lease_agreement/status';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const LeaseAgreements = sequelize.define(\n    'lease_agreements',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      lease_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'leases',\n          key: 'id',\n        },\n      },\n      landlord_payment_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'landlord_payments',\n          key: 'id',\n        },\n      },\n      property_address: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n        notEmpty: true,\n      },\n      property_unit: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      property_city: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      property_state: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      property_zip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      lease_end_action: {\n        type: DataTypes.ENUM(...Object.keys(LEASE_END_ACTIONS)),\n        allowNull: true,\n      },\n      smoking_policy: {\n        type: DataTypes.ENUM(...Object.keys(SMOKING_POLICY)),\n        allowNull: true,\n      },\n      require_renters_insurance: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      base_rent_amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      security_deposit_amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      other_deposit_amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      pet_deposit_amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      monthly_pet_rent_amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      prorated_rent_amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      one_time_fees: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      accepted_payments: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      tenants: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      tenant_mailing_address: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      tenant_mailing_unit: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      tenant_mailing_city: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      tenant_mailing_state: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      tenant_mailing_zip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      additional_occupants: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      company_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      landlords: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      landlord_mailing_address: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      landlord_mailing_unit: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      landlord_mailing_city: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      landlord_mailing_state: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      landlord_mailing_zip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      pets: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      utilities: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      additional_terms: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      key_copies: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      lease_start_date: {\n        type: DataTypes.DATEONLY,\n        allowNull: true,\n      },\n      lease_end_date: {\n        type: DataTypes.DATEONLY,\n        allowNull: true,\n      },\n      lead_paint_disclosure_required: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      lead_paint_hazards: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      lead_paint_records: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      completed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      status: {\n        type: new DataTypes.VIRTUAL(\n          DataTypes.ENUM(...Object.values(STATUSES)),\n          [\n            'property_address',\n            'base_rent_amount',\n            'tenants',\n            'smoking_policy',\n            'utilities',\n            'lead_paint_disclosure_required',\n            'landlord_payment_id',\n            'completed_at',\n            'people_on_lease_status',\n          ],\n        ),\n        get: function () {\n          if (\n            this.get('property_address') === null ||\n            this.get('base_rent_amount') === null ||\n            this.people_on_lease_status !== SECTION_STATUS['COMPLETED'] ||\n            this.get('smoking_policy') === null ||\n            this.get('utilities') === null ||\n            this.get('lead_paint_disclosure_required') === null\n          ) {\n            return STATUSES['IN_PROGRESS'];\n          }\n\n          if (this.get('completed_at')) {\n            return STATUSES['COMPLETED'];\n          }\n\n          return STATUSES['COMPLETED_UNPAID'];\n        },\n      },\n      completion_reminder_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      deposit_bank_name: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      deposit_bank_address: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      deposit_pays_interest: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      custom_state_data: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: {},\n      },\n      lease_agreement_selection: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      room_specifics: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n        defaultValue: null,\n      },\n      people_on_lease_status: {\n        type: DataTypes.VIRTUAL,\n        get: function () {\n          //required\n          const tenants = this.get('tenants');\n          const tenantsFilled = tenants ? tenants.length > 0 : false;\n\n          const landlords = this.get('landlords');\n          const company_name = !!get(landlords, 'company_name');\n          const landlordFirstName = !!get(landlords, '0.first_name');\n          const landlordLastName = !!get(landlords, '0.last_name');\n          const landlordEmail = !!get(landlords, '0.email');\n          const landlordPhone = !!get(landlords, '0.phone');\n\n          const firstlandlordFullNameOrCompanyFilled = !!(\n            (landlordFirstName && landlordLastName) ||\n            company_name\n          );\n\n          const landlord_mailing_address = !!this.get(\n            'landlord_mailing_address',\n          );\n          const landlord_mailing_city = !!this.get('landlord_mailing_city');\n          const landlord_mailing_state = !!this.get('landlord_mailing_state');\n          const landlord_mailing_zip = !!this.get('landlord_mailing_zip');\n\n          const requiredForSectionComplited = [\n            firstlandlordFullNameOrCompanyFilled,\n            landlordPhone,\n            landlordEmail,\n            landlord_mailing_address,\n            landlord_mailing_city,\n            landlord_mailing_state,\n            landlord_mailing_zip,\n          ];\n\n          //not required\n          const landlord_mailing_unit = !!this.get('landlord_mailing_unit');\n          const tenantMailingAddress = !!this.get('tenant_mailing_address');\n          const tenant_mailing_unit = !!this.get('tenant_mailing_unit');\n          const tenant_mailing_city = !!this.get('tenant_mailing_city');\n          const tenant_mailing_state = !!this.get('tenant_mailing_state');\n          const tenant_mailing_zip = !!this.get('tenant_mailing_zip');\n\n          const secondLandlordFirstName = !!get(landlords, '1.first_name');\n          const secondLandlordLastName = !!get(landlords, '1.last_name');\n          const secondLandlordEmail = !!get(landlords, '1.email');\n          const secondLandlordPhone = !!get(landlords, '1.phone');\n\n          const additional_occupants = this.get('additional_occupants');\n          const additionalOccupantsFilled = additional_occupants\n            ? additional_occupants.length > 0\n            : false;\n\n          const notRequeiredForSectionComplited = [\n            tenantsFilled,\n            tenantMailingAddress,\n            tenant_mailing_unit,\n            tenant_mailing_city,\n            tenant_mailing_state,\n            tenant_mailing_zip,\n            secondLandlordFirstName,\n            secondLandlordLastName,\n            secondLandlordEmail,\n            secondLandlordPhone,\n            additionalOccupantsFilled,\n            landlord_mailing_unit,\n          ];\n\n          const returnValue = (value) => value;\n          if (requiredForSectionComplited.every(returnValue)) {\n            return SECTION_STATUS['COMPLETED'];\n          }\n          if (\n            [\n              ...requiredForSectionComplited,\n              ...notRequeiredForSectionComplited,\n            ].some(returnValue)\n          ) {\n            return SECTION_STATUS['IN_PROGRESS'];\n          }\n          return SECTION_STATUS['NOT_STARTED'];\n        },\n      },\n      all_fields_completed: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      premium_promo_sent_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      purchase_reminder_sent_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      custom_html_request: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      lease_agreement_html: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n        defaultValue: null,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      indexes: [\n        {\n          fields: ['lease_id'],\n        },\n      ],\n    },\n  );\n\n  LeaseAgreements.associate = (models) => {\n    LeaseAgreements.belongsTo(models.leases, {\n      foreignKey: 'lease_id',\n      targetKey: 'id',\n    });\n    LeaseAgreements.belongsTo(models.landlord_payments, {\n      foreignKey: 'landlord_payment_id',\n      targetKey: 'id',\n    });\n    LeaseAgreements.hasMany(models.lease_documents, {\n      foreignKey: 'lease_agreement_id',\n      sourceKey: 'id',\n    });\n    LeaseAgreements.hasOne(models.signature_requests, {\n      foreignKey: 'lease_agreement_id',\n      targetKey: 'id',\n    });\n  };\n\n  return LeaseAgreements;\n};\n",
  "lease_documents": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'lease_documents',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      lease_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'leases',\n          key: 'id',\n        },\n      },\n      title: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      expiration_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      expiration_reminder_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      signature_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'signature_requests',\n          key: 'id',\n        },\n      },\n      is_shared: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      lease_agreement_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'lease_agreements',\n          key: 'id',\n        },\n      },\n      wizard_document_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'wizard_documents',\n          key: 'id',\n        },\n      },\n      type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: 'LEASE_DOCUMENT',\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'lease_documents',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.signature_requests, {\n      foreignKey: 'signature_request_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.lease_agreements, {\n      foreignKey: 'lease_agreement_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.wizard_documents, {\n      foreignKey: 'wizard_document_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.leases, {\n      foreignKey: 'lease_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "leases": "import moment from 'moment';\n\nimport LEASE_END_ACTIONS from '../../constants/lease_agreement/lease-end-actions';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const Leases = sequelize.define(\n    'leases',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      title: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      approved: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      archived_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      start_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      end_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      rent_amount: {\n        type: DataTypes.DOUBLE,\n        allowNull: true,\n      },\n      security_deposit_amount: {\n        type: DataTypes.DOUBLE,\n        allowNull: true,\n      },\n      insurance_notification_sent_at: {\n        // remove field when CSV is fixed\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      end_lease_reminder_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      end_action: {\n        type: DataTypes.ENUM(...Object.keys(LEASE_END_ACTIONS)),\n        allowNull: true,\n      },\n      partial_payments: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      autopay_enabled: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      lease_addendum_promo_email_90days: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'leases',\n      getterMethods: {\n        status() {\n          const currentTime = new Date().getTime();\n          const startOfToday = moment(currentTime).startOf('day').toDate();\n          if (this.archived_at) return 'PAST';\n          if (\n            !this.start_date ||\n            (Array.isArray(this.renters) && this.renters.length === 0)\n          ) {\n            const end = new Date(this.end_date);\n            if (\n              this.end_date &&\n              end < startOfToday &&\n              this.end_action !== LEASE_END_ACTIONS.CONTINUE_MONTHLY\n            ) {\n              return 'PAST';\n            }\n\n            return 'DRAFT';\n          }\n          const start = new Date(this.start_date || this.created_at).getTime();\n          if (currentTime < start) return 'UPCOMING';\n          if (!this.end_date) return 'CURRENT';\n          const end = new Date(this.end_date);\n\n          /**\n           * NOTE: If lease ends in next 120 days,\n           * it's considered to be ending soon\n           */\n          const endDateMinus120Days = new Date(this.end_date);\n          endDateMinus120Days.setDate(endDateMinus120Days.getDate() - 120);\n          if (startOfToday <= end && startOfToday > endDateMinus120Days)\n            return 'ENDING_SOON';\n\n          if (\n            end < startOfToday &&\n            this.end_action !== LEASE_END_ACTIONS.CONTINUE_MONTHLY\n          )\n            return 'PAST';\n          return 'CURRENT';\n        },\n        isPast() {\n          return (\n            this.status === 'PAST' ||\n            (this.leases_renters && this.leases_renters.archived_at) ||\n            (this.renters &&\n              this.renters.every(\n                (r) => r.leases_renters && r.leases_renters.archived_at,\n              ))\n          );\n        },\n        isArchived() {\n          return (\n            (this.leases_renters && this.leases_renters.deleted_at) ||\n            (this.renters &&\n              this.renters.every(\n                (r) => r.leases_renters && r.leases_renters.deleted_at,\n              ))\n          );\n        },\n      },\n    },\n  );\n  Leases.associate = (models) => {\n    Leases.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n    Leases.hasMany(models.lease_documents, {\n      foreignKey: 'lease_id',\n      sourceKey: 'id',\n    });\n    Leases.hasMany(models.wizard_documents, {\n      foreignKey: 'lease_id',\n      sourceKey: 'id',\n    });\n    Leases.hasMany(models.signature_requests, {\n      foreignKey: 'lease_id',\n      sourceKey: 'id',\n    });\n    Leases.hasMany(models.check_ins, {\n      foreignKey: 'lease_id',\n      sourceKey: 'id',\n    });\n    Leases.hasMany(models.lease_agreements, {\n      foreignKey: 'lease_id',\n      sourceKey: 'id',\n    });\n    Leases.hasMany(models.maintenance_requests, {\n      foreignKey: 'lease_id',\n      sourceKey: 'id',\n    });\n    Leases.hasMany(models.payment_request_rules, {\n      foreignKey: 'lease_id',\n      sourceKey: 'id',\n    });\n    Leases.hasMany(models.payment_requests, {\n      foreignKey: 'lease_id',\n      sourceKey: 'id',\n    });\n    Leases.belongsToMany(models.renters, {\n      through: 'leases_renters',\n      foreignKey: 'lease_id',\n    });\n    Leases.hasMany(models.checklists, {\n      foreignKey: 'lease_id',\n      sourceKey: 'id',\n    });\n  };\n  return Leases;\n};\n",
  "leases.spec": "import ms from 'ms';\n\nimport LEASE_END_ACTIONS from '../../constants/lease_agreement/lease-end-actions';\n\nimport models from '.';\n\nit('should be PAST when archived', async () => {\n  const lease = await models.leases.build({\n    archived_at: new Date(),\n  });\n\n  expect(lease.status).toBe('PAST');\n});\n\nit('should be DRAFT when no start date', async () => {\n  const lease = await models.leases.build({});\n\n  expect(lease.status).toBe('DRAFT');\n});\n\nit('should be DRAFT when no renters are included', async () => {\n  const lease = await models.leases.build({\n    start_date: new Date(),\n  });\n  lease.renters = [];\n\n  expect(lease.status).toBe('DRAFT');\n});\n\n// NOTE: If end date was missiig or in the future, this would still be DRAFT\nit('should be PAST when no start date or when no renters are included, but the end date is in the past', async () => {\n  const lease = await models.leases.build({\n    end_date: new Date(Date.now() - ms('1 day')),\n  });\n  lease.renters = [];\n\n  expect(lease.status).toBe('PAST');\n});\n\nit('should be UPCOMING when start date is in the future', async () => {\n  const lease = await models.leases.build({\n    start_date: new Date(Date.now() + ms('1 day')),\n  });\n\n  const renter = await models.renters.build({});\n\n  lease.renters = [renter];\n\n  expect(lease.status).toBe('UPCOMING');\n});\n\nit('should be CURRENT when lease start_date is in the past', async () => {\n  const lease = await models.leases.build({\n    start_date: new Date(Date.now() - ms('1 day')),\n  });\n\n  expect(lease.status).toBe('CURRENT');\n});\n\nit('should be ENDING_SOON when end date is in the next 120 days', async () => {\n  const lease = await models.leases.build({\n    start_date: new Date(Date.now() - ms('1 year')),\n    end_date: new Date(Date.now() + ms('119 day')),\n  });\n\n  expect(lease.status).toBe('ENDING_SOON');\n});\n\nit('should be PAST when end date is in the past', async () => {\n  const lease = await models.leases.build({\n    start_date: new Date(Date.now() - ms('1 year')),\n    end_date: new Date(Date.now() - ms('1 day')),\n  });\n\n  expect(lease.status).toBe('PAST');\n});\n\nit('should be CURRENT when end date is in the past but end_action is CONTINUE_MONTHLY', async () => {\n  const lease = await models.leases.build({\n    start_date: new Date(Date.now() - ms('1 year')),\n    end_date: new Date(Date.now() - ms('1 day')),\n    end_action: LEASE_END_ACTIONS.CONTINUE_MONTHLY,\n  });\n\n  expect(lease.status).toBe('CURRENT');\n});\n",
  "leases_renters": "module.exports = function (sequelize, DataTypes) {\n  const LeasesRenters = sequelize.define(\n    'leases_renters',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      lease_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'leases',\n          key: 'id',\n        },\n      },\n      /*\n        archived_at = represents date when tenant was moved_out_at\n        deleted_at = represents date when user has been archived\n\n        Since we are using `archived_at` inside the code base in a lot of places, including some GraphQL and analytics_info queries,\n        it will be a complex job to rename this column and update all the instances inside the codebase. Since we are planning\n        to revisit the whole leases implementation in a near or far future, we can refactor this at that point and rename\n        columns properly when we do that.\n      */\n      archived_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      insurance_notification_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      insurance_notification_reminders: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      requested_rent_payments: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      insurance_required_reminder_sent_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      renter_completed_onboarding: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      tenant_welcome_reminder_sent_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'leases_renters',\n    },\n  );\n  LeasesRenters.associate = (models) => {\n    LeasesRenters.belongsTo(models.leases, {\n      foreignKey: 'lease_id',\n      targetKey: 'id',\n    });\n    LeasesRenters.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n  };\n  return LeasesRenters;\n};\n",
  "listing_documents": "import LISTING_DOCUMENT_TYPES from '../../constants/listing_document/listing-document-types';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'listing_documents',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      title: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      type: {\n        type: DataTypes.ENUM(...Object.keys(LISTING_DOCUMENT_TYPES)),\n        allowNull: false,\n        defaultValue: LISTING_DOCUMENT_TYPES.OTHER,\n      },\n      expiration_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      expiration_reminder_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      type_other_detail: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'listing_documents',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "listings": "'use strict';\nimport { isUndefined } from 'lodash';\n\nimport { PROPERTY_ROLE } from '../../constants/listings/propertyRoleEnum';\nimport isLulaEligibleZip from '../../modules/lula/isLulaEligibleZip';\nimport zipToTimezone from '../../utils/helpers/zip_to_timezone';\n\nconst timezoneHook = async (listing, options) => {\n  if ((options.fields || []).includes('zip')) {\n    listing.zip_tz = zipToTimezone(listing.zip);\n  }\n};\n\nconst lulaEligibleHook = async (listing, options) => {\n  if ((options.fields || []).includes('zip')) {\n    listing.lula_eligible = isLulaEligibleZip(listing.zip);\n  }\n};\n\nmodule.exports = (sequelize, DataTypes) => {\n  const Listings = sequelize.define(\n    'listings',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      address: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n        set(addressValue) {\n          this.setDataValue(\n            'address',\n            addressValue ? addressValue.replace(/\\s+/g, ' ') : addressValue,\n          );\n        },\n      },\n      rent_amount: {\n        type: DataTypes.DOUBLE,\n        allowNull: true,\n      },\n      security_deposit_amount: {\n        type: DataTypes.DOUBLE,\n        allowNull: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      available_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      listed: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: false,\n      },\n      slug: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      unit: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      city: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      state: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      zip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      details: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      description: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      title: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      syndication_status: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      zillow_status: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      active: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: true,\n      },\n      short_url: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      video_tour_url: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      syndication_expires_on: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      zillow_expires_on: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      partial: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        // If I put defaultValue: true, the test for approveSyndication breaks ¯\\_(ツ)_/¯\n      },\n      renew_marketing_notification_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      smoking: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      occupancy_limit: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      shortlink: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      transunion_shareable_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      hide_street_number: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      zip_tz: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      geopoint: {\n        type: DataTypes.GEOGRAPHY('POINT', 4326),\n      },\n      parent_listing_id: {\n        // References the parent listing if this is a unit or room\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      root_listing_id: {\n        // Referenced the top listing if this is a unit or room\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      room_name: {\n        // Address 3\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      cover_photo_data: {\n        type: DataTypes.JSON,\n        allowNull: true,\n        defaultValue: null,\n      },\n      nickname: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      has_rooms: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      is_multiunit: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      property_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      other_building_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      other_building_type_specify: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      description_generated_by_ai_count: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      title_generated_by_ai_count: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      lula_eligible: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      property_role: {\n        // The role is a field that can be inferred from others and does not need to be stored\n        // Possible values are ROOM, UNIT, SINGLE_UNIT, MULTI_UNIT\n        type: DataTypes.VIRTUAL,\n        get() {\n          if (\n            isUndefined(this.parent_listing_id) ||\n            isUndefined(this.root_listing_id) ||\n            isUndefined(this.is_multiunit)\n          ) {\n            // Not enough information to determine this\n            return null;\n          }\n          if (this.parent_listing_id) {\n            if (\n              this.room_name ||\n              this.parent_listing_id !== this.root_listing_id\n            ) {\n              return PROPERTY_ROLE.ROOM;\n            }\n            return PROPERTY_ROLE.UNIT;\n          }\n          if (this.is_multiunit) return PROPERTY_ROLE.MULTI_UNIT;\n          return PROPERTY_ROLE.SINGLE_UNIT;\n        },\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      setterMethods: {\n        rent_amount(value) {\n          this.setDataValue('rent_amount', value ? parseInt(value, 10) : null);\n        },\n        security_deposit_amount(value) {\n          this.setDataValue(\n            'security_deposit_amount',\n            value ? parseInt(value, 10) : null,\n          );\n        },\n      },\n    },\n  );\n  Listings.addHook('beforeCreate', (listing, options) => {\n    timezoneHook(listing, options);\n    lulaEligibleHook(listing, options);\n  });\n  Listings.addHook('beforeUpdate', (listing, options) => {\n    timezoneHook(listing, options);\n    lulaEligibleHook(listing, options);\n  });\n  Listings.associate = (models) => {\n    Listings.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    Listings.hasMany(models.photos, {\n      foreignKey: 'listing_id',\n      sourceKey: 'id',\n    });\n    Listings.hasMany(models.listing_documents, {\n      foreignKey: 'listing_id',\n      sourceKey: 'id',\n    });\n    Listings.hasMany(models.flaggings, {\n      foreignKey: 'listing_id',\n      sourceKey: 'id',\n    });\n    Listings.hasMany(models.leases, {\n      foreignKey: 'listing_id',\n      sourceKey: 'id',\n    });\n    Listings.hasMany(models.maintenance_request_attachments, {\n      foreignKey: 'listing_id',\n      sourceKey: 'id',\n    });\n    Listings.hasMany(models.maintenance_requests, {\n      foreignKey: 'listing_id',\n      sourceKey: 'id',\n    });\n    Listings.hasMany(models.rental_requests, {\n      foreignKey: 'listing_id',\n      sourceKey: 'id',\n    });\n    Listings.hasMany(models.verification_documents, {\n      foreignKey: 'listing_id',\n      sourceKey: 'id',\n    });\n    Listings.hasMany(models.listings, {\n      foreignKey: 'parent_listing_id',\n      as: 'children_listings',\n      sourceKey: 'id',\n    });\n    Listings.belongsTo(models.listings, {\n      foreignKey: 'parent_listing_id',\n      as: 'parent_listing',\n      targetKey: 'id',\n    });\n    Listings.belongsTo(models.listings, {\n      foreignKey: 'root_listing_id',\n      as: 'root_listing',\n      targetKey: 'id',\n    });\n    Listings.hasMany(models.call_forwarding_phone_numbers, {\n      foreignKey: 'listing_id',\n      sourceKey: 'id',\n    });\n    Listings.hasMany(models.expenses, {\n      foreignKey: 'listing_id',\n      sourceKey: 'id',\n    });\n    Listings.hasOne(models.showing_availabilities, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n    Listings.hasMany(models.showings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n  };\n  return Listings;\n};\n",
  "maintenance_lula_events": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'maintenance_lula_events',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      customer_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      event_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      event_type: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      data: {\n        type: DataTypes.JSONB,\n        allowNull: false,\n      },\n      event_time_utc: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'maintenance_lula_events',\n    },\n  );\n\n  return model;\n};\n",
  "maintenance_request_activities": "import ACTIVITY_TYPES from '../../constants/maintenance_request/activity_types';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'maintenance_request_activities',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      maintenance_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'maintenance_requests',\n          key: 'id',\n        },\n      },\n      type: {\n        type: DataTypes.ENUM(...Object.keys(ACTIVITY_TYPES)),\n        allowNull: false,\n      },\n      content: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      additional_data: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      private: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'maintenance_request_activities',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.maintenance_requests, {\n      foreignKey: 'maintenance_request_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "maintenance_request_attachments": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'maintenance_request_attachments',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n      maintenance_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'maintenance_requests',\n          key: 'id',\n        },\n      },\n      maintenance_request_activity_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'maintenance_request_activities',\n          key: 'id',\n        },\n      },\n      filename: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      position: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      uploader_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      uploader_type: {\n        type: DataTypes.ENUM('OWNER', 'RENTER'),\n        allowNull: true,\n      },\n      private: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: false,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'maintenance_request_attachments',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.maintenance_requests, {\n      foreignKey: 'maintenance_request_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.maintenance_request_activities, {\n      foreignKey: 'maintenance_request_activity_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "maintenance_request_management_settings": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'maintenance_request_management_settings',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      approvers: {\n        type: DataTypes.JSONB,\n        allowNull: false,\n        defaultValue: [],\n      },\n      autosend: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      not_to_exceed: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        validate: {\n          // LULA does not accept requests outside of this range\n          min: 10000,\n          max: 500000,\n        },\n      },\n      approved_agreement_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'maintenance_request_management_settings',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n  };\n\n  return model;\n};\n",
  "maintenance_requests": "import MaintenanceCategoryEnum from '../../constants/maintenance_request/MaintenanceCategoryEnum';\nimport MAINTENANCE_REQUEST_STATUSES from '../../constants/maintenance_request/status';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'maintenance_requests',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      lease_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'leases',\n          key: 'id',\n        },\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      requester_id: {\n        // Usually the same as renter_id\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      title: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      category: {\n        type: DataTypes.ENUM(Object.keys(MaintenanceCategoryEnum)),\n        allowNull: true,\n        defaultValue: null,\n      },\n      description: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      preferred_time: {\n        type: DataTypes.ENUM('ANYTIME', 'COORDINATE'),\n        allowNull: true,\n      },\n      resolved_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      activity: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: [],\n      },\n      renters_notified: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: {},\n      },\n      starred: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      viewed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      last_activity: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      sent_to_partner: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      status: {\n        type: DataTypes.ENUM(Object.keys(MAINTENANCE_REQUEST_STATUSES)),\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'maintenance_requests',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.leases, {\n      foreignKey: 'lease_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n      as: 'renter',\n    });\n    model.belongsTo(models.renters, {\n      foreignKey: 'requester_id',\n      targetKey: 'id',\n      as: 'requester',\n    });\n    model.hasMany(models.maintenance_request_attachments, {\n      foreignKey: 'maintenance_request_id',\n      sourceKey: 'id',\n    });\n    model.hasMany(models.work_orders, {\n      foreignKey: 'maintenance_request_id',\n      sourceKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "maintenance_vendors": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'maintenance_vendors',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      categories: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: [],\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        set(emailValue) {\n          this.setDataValue(\n            'email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      phone: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      zip_codes: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: [],\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'maintenance_vendors',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "nodes": "module.exports = function (sequelize, DataTypes) {\n  return sequelize.define(\n    'nodes',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      node_api_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      allowed: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      account_num: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      bank_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      nickname: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      // type: { //ACTIVE RECORD HAS CONFLICTS WITH TYPE FIELD\n      //   type: DataTypes.STRING,\n      //   allowNull: true\n      // },\n      user_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      user_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      account_class: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      error_message: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      mfa: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'nodes',\n    },\n  );\n};\n",
  "owner_onboardings": "module.exports = (sequelize, DataTypes) => {\n  const OwnerOnboardings = sequelize.define(\n    'owner_onboardings',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      features: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: [],\n      },\n      properties: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: 0,\n      },\n      process: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      getting_started: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: [],\n      },\n      rental_process_stage: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: null,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      onboarding_personalize_flow: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      years_of_management: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      how_did_you_hear_about_us: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      academy: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      signup_test: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'owner_onboardings',\n    },\n  );\n  OwnerOnboardings.associate = (models) => {\n    OwnerOnboardings.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n  return OwnerOnboardings;\n};\n",
  "owner_statistics": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'owner_statistics',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      first_lead_email_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      is_customer: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      has_receipts: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      reports_received: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      premium_cancelation_reason: {\n        type: DataTypes.JSON,\n        defaultValue: null,\n      },\n      vip_support_addon_cancelation_reason: {\n        type: DataTypes.JSON,\n        defaultValue: null,\n      },\n      property_title_generated_by_ai_count: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      property_description_generated_by_ai_count: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      property_title_generated_by_ai_vote_up_count: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      property_description_generated_by_ai_vote_up_count: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      property_title_generated_by_ai_vote_down_count: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      property_description_generated_by_ai_vote_down_count: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      plan_to_screen_tenants: {\n        type: DataTypes.STRING,\n        defaultValue: null,\n      },\n      questionnaire_create_lease_agreements_tool: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      questionnaire_create_lease_agreements_tool_comment: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      questionnaire_collect_rent_through: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      questionnaire_collect_rent_accepted_payment_methods: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      questionnaire_collect_rent_track_payments: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      rent_payments_preference: {\n        type: DataTypes.ENUM('ONLINE', 'OFFLINE'),\n        allowNull: true,\n      },\n      rent_payments_setup_feedback: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      mobile_info: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n\n      lula_eligible: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'owner_statistics',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "owner_tracking_signup_info": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'owner_tracking_signup_info',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      landing_page: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      landing_page_path: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      referrer_url: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      source: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      medium: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      campaign: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      term: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      content: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      click_id_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      click_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      device_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      operating_system: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      city: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      country_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      geopoint: {\n        type: DataTypes.GEOGRAPHY('POINT', 4326),\n      },\n      zip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'owner_tracking_signup_info',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "owner_verifications": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'owner_verifications',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      telephone: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      pin: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      verified: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: false,\n      },\n      contact_type: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      verifications_count: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'owner_verifications',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "owner_waitlist_features": "module.exports = function (sequelize, DataTypes) {\n  const OwnerWaitlistFeatures = sequelize.define(\n    'owner_waitlist_features',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      feature: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n      },\n      location: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n\n  OwnerWaitlistFeatures.associate = (models) => {\n    OwnerWaitlistFeatures.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n\n  return OwnerWaitlistFeatures;\n};\n",
  "owners": "'use strict';\n\nimport config from '../../config';\nimport PREMIUM_PRICE_SIGNUP from '../../constants/prices/premium_price_signup';\nimport {\n  isNewMessagingEnabled,\n  onOwnerCreated,\n  onOwnerUpdated,\n} from '../../services/cometchat.service';\nimport { VIP_SUPPORT_ADDON_STATUSES } from '../../services/enums';\nimport logger from '../../utils/logger';\n\nconst log = logger.use('models');\n\nmodule.exports = (sequelize, DataTypes) => {\n  const Owners = sequelize.define(\n    'owners',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        set(emailValue) {\n          this.setDataValue(\n            'email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      encrypted_password: DataTypes.STRING,\n      reset_password_token: DataTypes.STRING,\n      reset_password_sent_at: DataTypes.DATE,\n      sign_in_count: DataTypes.INTEGER,\n      sign_in_attempts: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      last_login_attempt: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      telephone: DataTypes.STRING,\n      agreed_tos_at: { type: DataTypes.DATE },\n      agreed_gpt_tos_at: { type: DataTypes.DATE },\n      syndications_preapproved: DataTypes.BOOLEAN,\n      require_insurance: DataTypes.BOOLEAN,\n      first_name: DataTypes.STRING,\n      last_name: DataTypes.STRING,\n      company: DataTypes.STRING,\n      last_active_city: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      last_active: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      last_active_ip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      unconfirmed_email: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        set(emailValue) {\n          this.setDataValue(\n            'unconfirmed_email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      confirmation_token: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      confirmed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      confirmation_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      legacy_custom_application_questions_access: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      custom_application_question_1: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      custom_application_question_2: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      custom_application_question_3: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      custom_application_question_4: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      evicted_bkg_question_enabled: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: true,\n      },\n      conviction_bkg_question_enabled: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: true,\n      },\n      civil_action_bkg_question_enabled: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: true,\n      },\n      custom_logo: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      settings: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      mailing_address: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      admin_notes: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: [],\n      },\n      social_signup: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: '',\n      },\n      activity: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      tt_fraud_status: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      api_user_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      customer_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        unique: true,\n      },\n      sift_fraud_info: {\n        type: DataTypes.JSONB,\n        defaultValue: {},\n      },\n      deleted_reason: {\n        type: DataTypes.ENUM(\n          'BLOCKLISTED',\n          'BLACKLISTED',\n          'ACCOUNT_CLOSED',\n          'TEST_ACCOUNT',\n          'RENTER',\n          'DEACTIVATED_BY_USER',\n        ),\n        allowNull: true,\n      },\n      deleted_by: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      transunion_shareable_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      reset_auth_time: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      has_received_payments: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      application_fee: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: null,\n      },\n      requested_stripe_identity: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      apple_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      has_purchased_forms_pack: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      has_purchased_link_your_screening_app: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      premium_subscription_active: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      reihub_subscription_active: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      vip_support_active: {\n        type: DataTypes.ENUM(...Object.keys(VIP_SUPPORT_ADDON_STATUSES)),\n        allowNull: true,\n      },\n      premium_price_signup: {\n        type: DataTypes.ENUM(...Object.keys(PREMIUM_PRICE_SIGNUP)),\n        defaultValue: null,\n        allowNull: true,\n      },\n      fast_payouts_risk_acknowledged: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      app_fee_exp_location: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      app_fee_price_exp_group: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      app_fee_price_exp_test_group: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      app_fee_price_exp_premium_price: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      app_fee_price_exp_cookie_location: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      app_fee_price_exp_cookie_page_url: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      batched_emails: {\n        type: DataTypes.ARRAY(DataTypes.TEXT),\n        allowNull: true,\n      },\n      covers_ach_fee: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      push_token: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      password_last_changed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      mobile_app_login: {\n        type: DataTypes.ENUM('IOS', 'ANDROID'),\n        defaultValue: null,\n        allowNull: true,\n      },\n      maintenance_plus_active: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      stage_specific_cookie_location: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: null,\n      },\n      stage_specific_cookie: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: null,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      getterMethods: {\n        phone_verified() {\n          if (!this.owner_verifications) return null;\n          return !!this.owner_verifications.find(\n            (v) => v.verified && v.telephone === this.telephone,\n          );\n        },\n      },\n      setterMethods: {\n        telephone(value) {\n          this.setDataValue(\n            'telephone',\n            (value && value.replace(/[^0-9]/gi, '')) || undefined,\n          );\n        },\n      },\n    },\n  );\n  Owners.associate = (models) => {\n    Owners.hasMany(models.listings, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.owner_verifications, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.landlord_payments, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.affiliate_codes, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.stripe_subscriptions, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.payout_ledgers, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.check_ins, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.leads, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.conversations, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasOne(models.owner_onboardings, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    Owners.hasMany(models.rent_payments, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.contact_changes, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.signature_request_signers, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.verification_documents, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.stripe_identities, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    Owners.hasMany(models.trusted_devices, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    Owners.hasOne(models.owner_statistics, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    Owners.hasOne(models.maintenance_request_management_settings, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    Owners.hasMany(models.user_payment_methods, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    Owners.hasMany(models.referrals, {\n      foreignKey: 'referral_owner_id',\n      targetKey: 'id',\n      as: 'referrals',\n    });\n    Owners.hasMany(models.referrals, {\n      foreignKey: 'advocate_owner_id',\n      targetKey: 'id',\n      as: 'advocates',\n    });\n    Owners.hasMany(models.checklists, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n      as: 'checklists',\n    });\n    Owners.hasMany(models.custom_pre_screener_questions, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    Owners.hasMany(models.expenses, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    Owners.hasMany(models.showing_availabilities, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    Owners.hasMany(models.showings, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n  Owners.addHook('beforeCreate', (owner) => {\n    if (config.featuresEnabled.includes('DISABLE_SIGNUP_PREVENTION')) return;\n    // Only for dev and stable, we reject all signups that are not using @turbotenant.com emails\n    if (\n      !config.isProd &&\n      !config.isTestMode &&\n      owner.email &&\n      !owner.email.match(/.+@(turbotenant|tt)\\.com/g)\n    ) {\n      return Promise.reject(\"Can't create landlord outside of production.\");\n    }\n  });\n  Owners.addHook('beforeUpdate', (owner) => {\n    const prevFraudStatus = owner._previousDataValues.tt_fraud_status;\n    if (\n      prevFraudStatus !== owner.tt_fraud_status &&\n      prevFraudStatus !== 'DENIED'\n    ) {\n      if (!owner.dataValues.settings) {\n        log.error(\n          new Error(\n            `settings field is empty for Owner:${owner.id} (prev status ${prevFraudStatus})`,\n          ),\n        );\n        return;\n      }\n      owner.settings = {\n        ...owner.settings,\n        prev_fraud_status: prevFraudStatus,\n      };\n    }\n  });\n  Owners.addHook('afterCreate', async (owner) => {\n    if (config.isTestMode || !isNewMessagingEnabled()) return;\n    await onOwnerCreated(owner);\n  });\n  Owners.addHook('afterUpdate', async (owner) => {\n    if (config.isTestMode || !isNewMessagingEnabled()) return;\n    await onOwnerUpdated(owner);\n  });\n  return Owners;\n};\n",
  "owners_access": "'use strict';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const OwnersAccess = sequelize.define(\n    'owners_access',\n    {\n      consumer_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'owners_access',\n    },\n  );\n  OwnersAccess.associate = (models) => {\n    models.owners.belongsToMany(models.consumers, {\n      // as: 'consumers',\n      through: OwnersAccess,\n      foreignKey: 'owner_id',\n    });\n    models.consumers.belongsToMany(models.owners, {\n      // as: 'consumers',\n      through: OwnersAccess,\n      foreignKey: 'consumer_id',\n    });\n  };\n  return OwnersAccess;\n};\n",
  "ownwell_savings_reports": "('use strict');\n\nmodule.exports = (sequelize, DataTypes) => {\n  const OwnwellSavingsReports = sequelize.define(\n    'ownwell_savings_reports',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      fips: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      apn: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      savings: {\n        type: DataTypes.DOUBLE,\n        allowNull: true,\n      },\n      tax_year: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      address: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      city: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      state: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      state_full: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      zip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      matched: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      response_status: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n      error: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n  OwnwellSavingsReports.associate = (models) => {\n    OwnwellSavingsReports.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    OwnwellSavingsReports.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n  };\n  return OwnwellSavingsReports;\n};\n",
  "payment_alert_configurations": "import { ALERT_TYPES } from '../../services/payment_alerts/enums';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'payment_alert_configurations',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      enabled_alert_types: {\n        type: DataTypes.ARRAY(DataTypes.ENUM(...Object.keys(ALERT_TYPES))),\n        allowNull: false,\n        defaultValue: [],\n      },\n      last_updated_by: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'payment_alert_configurations',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.admins, {\n      foreignKey: 'last_updated_by',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "payment_alerts": "import { STATUSES } from '../../services/payment_alerts/enums';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'payment_alerts',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      rent_payment_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'rent_payments',\n          key: 'id',\n        },\n      },\n      alert_types: {\n        type: DataTypes.ARRAY(DataTypes.STRING),\n        allowNull: false,\n        defaultValue: [],\n      },\n      viewed_at: {\n        type: DataTypes.DATE,\n      },\n      status: {\n        type: DataTypes.ENUM(...Object.keys(STATUSES)),\n        allowNull: false,\n        defaultValue: STATUSES.RAISED,\n      },\n      status_applied_at: {\n        type: DataTypes.DATE,\n      },\n      risk_level: {\n        type: DataTypes.INTEGER,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'payment_alerts',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.rent_payments, {\n      foreignKey: 'rent_payment_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "payment_methods": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'payment_methods',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      customer_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      source_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      source_brand: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      source_expiration: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      source_last4: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      source_bank_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      source_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      source_status: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      card_holder: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      zip_code: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'payment_methods',\n    },\n  );\n  model.associate = (models) => {\n    model.hasOne(models.user_payment_methods, {\n      foreignKey: 'payment_method_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "payment_request_rules": "module.exports = function (sequelize, DataTypes) {\n  const PaymentRequestRules = sequelize.define(\n    'payment_request_rules',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      lease_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'leases',\n          key: 'id',\n        },\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      category: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      description: {\n        type: DataTypes.TEXT,\n        defaultValue: '',\n      },\n      amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      type: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        defaultValue: 'ONE_TIME',\n      },\n      last_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      end_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      due_day_of_month: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      finalized: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      destination_id: {\n        type: DataTypes.INTEGER,\n        defaultValue: null,\n        allowNull: true,\n        references: {\n          model: 'stripe_external_accounts',\n          key: 'id',\n        },\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      start_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      late_fee_amount: {\n        type: DataTypes.DOUBLE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      is_late_fee_percentage: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: null,\n        allowNull: true,\n      },\n      late_fee_grace_period: {\n        type: DataTypes.INTEGER,\n        defaultValue: null,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'payment_request_rules',\n    },\n  );\n  PaymentRequestRules.associate = (models) => {\n    PaymentRequestRules.belongsTo(models.leases, {\n      foreignKey: 'lease_id',\n      targetKey: 'id',\n    });\n    PaymentRequestRules.hasMany(models.autopay_rules, {\n      foreignKey: 'payment_request_rule_id',\n      sourceKey: 'id',\n    });\n    PaymentRequestRules.hasMany(models.payment_requests, {\n      foreignKey: 'payment_request_rule_id',\n      sourceKey: 'id',\n    });\n    PaymentRequestRules.belongsTo(models.stripe_external_accounts, {\n      foreignKey: 'destination_id',\n      targetKey: 'id',\n      as: 'destination',\n    });\n  };\n  return PaymentRequestRules;\n};\n",
  "payment_requests": "import { Op } from 'sequelize';\n\nimport PAYMENT_CATEGORIES from '../../constants/rei_hub/payment_categories';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const PaymentRequests = sequelize.define(\n    'payment_requests',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      lease_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'leases',\n          key: 'id',\n        },\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      payment_request_rule_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true, // should be changed to false when it's released\n        // we can't use the FK at the moment since there are\n        // rows in dev and stable where the rule was removed\n        // references: {\n        //   model: 'payment_request_rules',\n        //   key: 'id',\n        // },\n      },\n      payment_request_rule: {\n        type: DataTypes.JSONB,\n        allowNull: false,\n      },\n      category: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      description: {\n        type: DataTypes.TEXT,\n        defaultValue: '',\n      },\n      amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      balance_due: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      reminder_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      past_due_renter_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      past_due_landlord_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      due_date: {\n        type: DataTypes.DATEONLY,\n        allowNull: false,\n      },\n      destination_id: {\n        type: DataTypes.INTEGER,\n        defaultValue: null,\n        allowNull: true,\n        references: {\n          model: 'stripe_external_accounts',\n          key: 'id',\n        },\n      },\n      renter_notified_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      late_fee_id: {\n        type: DataTypes.INTEGER,\n        defaultValue: null,\n        allowNull: true,\n        references: {\n          model: 'payment_requests',\n          key: 'id',\n        },\n      },\n      skip_late_fee: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: null,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      creation_source: {\n        type: DataTypes.ENUM('APPLICATION', 'WORKER'),\n        allowNull: true,\n      },\n      manual_reminders: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      last_manual_reminder_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'payment_requests',\n      indexes: [\n        {\n          fields: ['payment_request_rule_id', 'due_date'],\n          unique: true,\n          where: {\n            category: { [Op.ne]: PAYMENT_CATEGORIES.LATE_FEE },\n            deleted_at: null,\n            created_at: { [Op.gt]: new Date('2023-04-06') },\n          },\n        },\n      ],\n    },\n  );\n  PaymentRequests.associate = (models) => {\n    PaymentRequests.hasOne(models.payment_requests, {\n      foreignKey: 'late_fee_id',\n      targetKey: 'id',\n    });\n    PaymentRequests.belongsTo(models.leases, {\n      foreignKey: 'lease_id',\n      targetKey: 'id',\n    });\n    PaymentRequests.belongsTo(models.payment_request_rules, {\n      foreignKey: 'payment_request_rule_id',\n      targetKey: 'id',\n      as: 'payment_request_rule_model',\n    });\n    PaymentRequests.belongsToMany(models.rent_payments, {\n      through: 'rent_transactions',\n      //as: 'leasesRenter',\n      foreignKey: 'payment_request_id',\n    });\n    PaymentRequests.belongsTo(models.stripe_external_accounts, {\n      foreignKey: 'destination_id',\n      targetKey: 'id',\n      as: 'destination',\n    });\n  };\n  return PaymentRequests;\n};\n",
  "payments": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'payments',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      charge_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      rental_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'rental_requests',\n          key: 'id',\n        },\n      },\n      amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      source: {\n        type: DataTypes.JSONB,\n        defaultValue: {},\n      },\n      token: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      owner_id_back: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      payer_type: {\n        type: DataTypes.ENUM('OWNER', 'RENTER'),\n        allowNull: false,\n      },\n      metadata: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'payments',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.rental_requests, {\n      foreignKey: 'rental_request_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "payout_ledger_items": "module.exports = function (sequelize, DataTypes) {\n  const PayoutLedgerItems = sequelize.define(\n    'payout_ledger_items',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      payout_ledger_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'payout_ledgers',\n          key: 'id',\n        },\n      },\n      rent_payment_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'rent_payments',\n          key: 'id',\n        },\n      },\n      stripe_charge_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      amount: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n      status: {\n        type: DataTypes.ENUM('SUCCEEDED', 'FAILED', 'PENDING'),\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'payout_ledger_items',\n    },\n  );\n  PayoutLedgerItems.associate = (models) => {\n    PayoutLedgerItems.belongsTo(models.payout_ledgers, {\n      foreignKey: 'payout_ledger_id',\n      targetKey: 'id',\n    });\n    PayoutLedgerItems.belongsTo(models.rent_payments, {\n      foreignKey: 'rent_payment_id',\n      targetKey: 'id',\n    });\n  };\n  return PayoutLedgerItems;\n};\n",
  "payout_ledgers": "import SOURCE_TYPE from '../../constants/payout_ledgers/source_type';\nimport STATUS from '../../constants/payout_ledgers/status.js';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const PayoutLedgers = sequelize.define(\n    'payout_ledgers',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      stripe_account_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      // this is a stripe id, not our stripe_payouts table id\n      stripe_payout_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      amount: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n      source_type: {\n        type: DataTypes.ENUM(Object.keys(SOURCE_TYPE)),\n        allowNull: true,\n      },\n      status: {\n        type: DataTypes.ENUM(Object.keys(STATUS)),\n        allowNull: true,\n      },\n      stripe_response: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      stripe_balance_transaction_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      scheduled_date: {\n        type: DataTypes.DATEONLY,\n        allowNull: true,\n      },\n      stripe_payout_created: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      arrival_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      statement_descriptor: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      destination_id: {\n        type: DataTypes.INTEGER,\n        defaultValue: null,\n        allowNull: true,\n        references: {\n          model: 'stripe_external_accounts',\n          key: 'id',\n        },\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      balance_check_failed: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      is_instant: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n        allowNull: false,\n      },\n      instant_payout_fee: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n        allowNull: true,\n      },\n      fee_payment_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: null,\n      },\n      ach_fee: {\n        type: DataTypes.INTEGER,\n        defaultValue: null,\n        allowNull: true,\n      },\n      ach_fee_paid: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      last_event_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'payout_ledgers',\n    },\n  );\n  PayoutLedgers.associate = (models) => {\n    PayoutLedgers.hasMany(models.payout_ledger_items, {\n      foreignKey: 'payout_ledger_id',\n      sourceKey: 'id',\n    });\n    PayoutLedgers.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    PayoutLedgers.belongsTo(models.stripe_external_accounts, {\n      foreignKey: 'destination_id',\n      targetKey: 'id',\n      as: 'destination',\n    });\n  };\n  return PayoutLedgers;\n};\n",
  "pets": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'pets',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      kind: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      breed: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      weight: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      age: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      sex: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      rental_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'rental_requests',\n          key: 'id',\n        },\n      },\n    },\n    {\n      timestamps: false,\n      tableName: 'pets',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.rental_requests, {\n      foreignKey: 'rental_request_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "photos": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'photos',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      picture: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      uploader_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      uploader_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: 'Owner',\n      },\n      position: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      rotation: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: '0',\n      },\n    },\n    {\n      tableName: 'photos',\n      timestamps: false,\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "plaid_bank_transfer_events": "'use strict';\nmodule.exports = function (sequelize, DataTypes) {\n  const PlaidBankTransferEvents = sequelize.define(\n    'plaid_bank_transfer_events',\n    {\n      id: {\n        type: DataTypes.BIGINT,\n        allowNull: false,\n        primaryKey: true,\n      },\n      account_id: { type: DataTypes.STRING },\n      bank_transfer_amount: { type: DataTypes.DECIMAL(10, 2) },\n      bank_transfer_id: { type: DataTypes.STRING },\n      bank_transfer_iso_currency_code: { type: DataTypes.STRING },\n      bank_transfer_type: { type: DataTypes.STRING },\n      direction: { type: DataTypes.STRING },\n      event_type: { type: DataTypes.STRING },\n      failure_reason: { type: DataTypes.JSONB },\n      origination_account_id: { type: DataTypes.STRING },\n      receiver_details: { type: DataTypes.JSON },\n      timestamp: { type: DataTypes.DATE },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n  return PlaidBankTransferEvents;\n};\n",
  "plaid_verifications": "import { PLAID_VERIFICATION_STATUS } from '../../constants/plaid_verifications/plaid_verifications_status';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'plaid_verifications',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      plaid_account_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: true,\n      },\n      plaid_access_token: {\n        type: DataTypes.STRING,\n      },\n      status: {\n        type: DataTypes.ENUM(Object.keys(PLAID_VERIFICATION_STATUS)),\n      },\n      account_name: {\n        type: DataTypes.STRING,\n      },\n      reminders_sent: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'plaid_verifications',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n  };\n\n  return model;\n};\n",
  "referrals": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'referrals',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      referral_owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      advocate_owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      email: {\n        type: DataTypes.STRING,\n        defaultValue: null,\n        allowNull: true,\n      },\n      message: {\n        type: DataTypes.TEXT,\n        defaultValue: null,\n        allowNull: true,\n      },\n      reminded_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n        defaultValue: null,\n      },\n      cx_referred_by: {\n        type: DataTypes.STRING,\n        defaultValue: null,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'referrals',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'referral_owner_id',\n      targetKey: 'id',\n      as: 'referral',\n    });\n    model.belongsTo(models.owners, {\n      foreignKey: 'advocate_owner_id',\n      targetKey: 'id',\n      as: 'advocate',\n    });\n  };\n  return model;\n};\n",
  "rent_estimates": "module.exports = function (sequelize, DataTypes) {\n  const RentEstimates = sequelize.define(\n    'rent_estimates',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      address: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      bedrooms: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      baths: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      min: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      max: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      mean: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      percentile_25: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      percentile_75: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      samples: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      radius_miles: {\n        type: DataTypes.DOUBLE,\n        allowNull: true,\n      },\n      building_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      agreed_tos_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'rent_estimates',\n    },\n  );\n  RentEstimates.associate = () => {};\n  return RentEstimates;\n};\n",
  "rent_payments": "import Sequelize from 'sequelize';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const RentPayments = sequelize.define(\n    'rent_payments',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      autopay_rule_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'autopay_rules',\n          key: 'id',\n        },\n      },\n      charge_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      stripe_account_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      stripe_payout_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      amount: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n      type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      paid: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      refunded: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      payment_method_details: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      transfer_data: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      outcome: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      deposited_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      status: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      convenience_fee: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      metadata: {\n        type: DataTypes.JSONB,\n        defaultValue: {},\n      },\n      description: {\n        type: DataTypes.STRING,\n        defaultValue: '',\n      },\n      last_event_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      renter_ip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      customer_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      failure_code: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      bank_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      date_paid: {\n        type: DataTypes.DATE,\n        allowNull: true,\n        defaultValue: Sequelize.NOW,\n      },\n      payment_method: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      estimated_deposit_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      stripe_payout_created: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      balance_check_failed: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      settlement_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: null,\n        unique: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'rent_payments',\n    },\n  );\n  RentPayments.associate = (models) => {\n    RentPayments.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    RentPayments.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    RentPayments.belongsTo(models.stripe_payouts, {\n      foreignKey: 'stripe_payout_id',\n      targetKey: 'id',\n    });\n    RentPayments.hasOne(models.payout_ledger_items, {\n      foreignKey: 'rent_payment_id',\n      sourceKey: 'id',\n    });\n    RentPayments.belongsToMany(models.payment_requests, {\n      through: 'rent_transactions',\n      //as: 'rentersLeases',\n      foreignKey: 'rent_payment_id',\n    });\n    RentPayments.hasOne(models.payment_alerts, {\n      foreignKey: 'rent_payment_id',\n      sourceKey: 'id',\n    });\n    RentPayments.belongsTo(models.autopay_rules, {\n      foreignKey: 'autopay_rule_id',\n      targetKey: 'id',\n    });\n  };\n  return RentPayments;\n};\n",
  "rent_transactions": "module.exports = function (sequelize, DataTypes) {\n  const RentTransactions = sequelize.define(\n    'rent_transactions',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      rent_payment_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'rent_payments',\n          key: 'id',\n        },\n      },\n      payment_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'payment_requests',\n          key: 'id',\n        },\n      },\n      amount: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: false,\n      underscored: true,\n      tableName: 'rent_transactions',\n    },\n  );\n  RentTransactions.associate = (models) => {\n    RentTransactions.belongsTo(models.rent_payments, {\n      foreignKey: 'rent_payment_id',\n      targetKey: 'id',\n    });\n    RentTransactions.belongsTo(models.payment_requests, {\n      foreignKey: 'payment_request_id',\n      targetKey: 'id',\n    });\n  };\n  return RentTransactions;\n};\n",
  "rental_requests": "import config from '../../config';\nimport {\n  isNewMessagingEnabled,\n  onRentalRequestCreated,\n  onRentalRequestUpdate,\n} from '../../services/cometchat.service';\nimport {\n  decryptWithSaltAndIV,\n  encryptWithSaltAndIV,\n} from '../../services/crypto.service';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const RentalRequests = sequelize.define(\n    'rental_requests',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      move_in_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      moved_in_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      first_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      middle_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      last_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      telephone: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      encrypted_ssn: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      birthdate: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      smoking: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      disability: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      disability_description: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      evicted: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      evicted_description: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      conviction: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      conviction_description: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      civil_action: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      civil_action_description: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      evicted_bkg_question_enabled: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: true,\n      },\n      conviction_bkg_question_enabled: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: true,\n      },\n      civil_action_bkg_question_enabled: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: true,\n      },\n      co_applicant: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      co_applicant_description: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      pet: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      agrees_to_terms: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: false,\n      },\n      applying_as_tenant: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: true,\n      },\n      how_did_you_hear: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      how_did_you_hear_other: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: null,\n      },\n      additional_comments: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      bank: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      encrypted_ssn_salt: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      encrypted_ssn_iv: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      archived_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      screening_report_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: 'PackageCore',\n      },\n      custom_application_answer_1: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      custom_application_answer_2: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      custom_application_answer_3: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      custom_application_answer_4: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      custom_application_question_1: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      custom_application_question_2: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      custom_application_question_3: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      custom_application_question_4: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      api_user_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      reminder_emails: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      landlord_pays: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      cold_applicant_reminder_sent: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      request_method: {\n        type: DataTypes.ENUM(\n          'ONLINE',\n          'EXTERNAL_EMAIL',\n          'EXTERNAL_SMS',\n          'EXTERNAL_BOTH',\n        ),\n        allowNull: false,\n        defaultValue: 'ONLINE',\n      },\n      number_of_people_living: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      completed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      upload_documents_later: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      ssn: {\n        type: DataTypes.VIRTUAL,\n        get() {\n          if (\n            !this ||\n            !this.encrypted_ssn ||\n            !this.encrypted_ssn_iv ||\n            !this.encrypted_ssn_salt\n          ) {\n            return null;\n          }\n          try {\n            return decryptWithSaltAndIV(\n              this.encrypted_ssn,\n              this.encrypted_ssn_iv,\n              this.encrypted_ssn_salt,\n            );\n          } catch (err) {\n            return null;\n          }\n        },\n        set(value) {\n          if (!value) {\n            this.setDataValue('encrypted_ssn', null);\n            this.setDataValue('encrypted_ssn_iv', null);\n            this.setDataValue('encrypted_ssn_salt', null);\n            return;\n          }\n          const enc = encryptWithSaltAndIV(value);\n          this.setDataValue('encrypted_ssn', enc.encrypted);\n          this.setDataValue('encrypted_ssn_iv', enc.iv);\n          this.setDataValue('encrypted_ssn_salt', enc.salt);\n        },\n      },\n      coupon_applied: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      unemployed: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n        allowNull: true,\n      },\n      not_past_employers: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n        allowNull: true,\n      },\n      has_vehicle: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      past_address_not_applicable: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: false,\n      },\n      application_group_identifier_token: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      wants_transunion_receipt: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      tableName: 'rental_requests',\n      timestamps: true,\n      underscored: true,\n      getterMethods: {\n        has_payment() {\n          if (!Array.isArray(this.payments)) return this.payments;\n          return this.payments.length > 0;\n        },\n      },\n    },\n  );\n\n  RentalRequests.prototype.getBundleId = function getBundleId(premium) {\n    const bundleIdMap = {\n      PackageCore: premium ? 14 : 2,\n      PackageCorePlusEviction: premium ? 13 : 3,\n    };\n\n    return (\n      bundleIdMap[this.screening_report_type] || this.screening_report_type\n    );\n  };\n\n  RentalRequests.associate = (models) => {\n    RentalRequests.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n    RentalRequests.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    RentalRequests.hasMany(models.income_sources, {\n      foreignKey: 'rental_request_id',\n      sourceKey: 'id',\n    });\n    RentalRequests.hasMany(models.pets, {\n      foreignKey: 'rental_request_id',\n      sourceKey: 'id',\n    });\n    RentalRequests.hasMany(models.employments, {\n      foreignKey: 'rental_request_id',\n      sourceKey: 'id',\n    });\n    RentalRequests.hasMany(models.contacts, {\n      foreignKey: 'rental_request_id',\n      sourceKey: 'id',\n    });\n    RentalRequests.hasMany(models.attachments, {\n      foreignKey: 'rental_request_id',\n      sourceKey: 'id',\n    });\n    RentalRequests.hasMany(models.vehicles, {\n      foreignKey: 'rental_request_id',\n      sourceKey: 'id',\n    });\n    RentalRequests.hasMany(models.residences, {\n      foreignKey: 'rental_request_id',\n      sourceKey: 'id',\n    });\n    RentalRequests.hasMany(models.payments, {\n      foreignKey: 'rental_request_id',\n      sourceKey: 'id',\n    });\n    RentalRequests.hasMany(models.co_applicants, {\n      foreignKey: 'rental_request_id',\n      sourceKey: 'id',\n    });\n    RentalRequests.hasMany(models.credit_checks, {\n      foreignKey: 'rental_request_id',\n      sourceKey: 'id',\n    });\n  };\n  RentalRequests.addHook('afterCreate', async (RR) => {\n    if (config.isTestMode || !isNewMessagingEnabled()) return;\n    const requestedOnline = RR?.request_method === 'ONLINE';\n    const completedAt = RR?.completed_at;\n    if (requestedOnline && !completedAt) return;\n    await onRentalRequestCreated(RR);\n  });\n  RentalRequests.addHook('afterUpdate', async (RR) => {\n    if (config.isTestMode || !isNewMessagingEnabled()) return;\n    const requestedOnline = RR?.request_method === 'ONLINE';\n    const completedAt = RR?.completed_at;\n    if (requestedOnline && completedAt) {\n      await onRentalRequestCreated(RR);\n    } else {\n      await onRentalRequestUpdate(RR);\n    }\n  });\n  return RentalRequests;\n};\n",
  "renter_credit_reporting_info": "import {\n  decryptWithSaltAndIV,\n  encryptWithSaltAndIV,\n} from '../../services/crypto.service';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const RenterCreditReportingInfo = sequelize.define(\n    'renter_credit_reporting_info',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      first_name: {\n        type: DataTypes.STRING,\n        defaultValue: null,\n        allowNull: true,\n      },\n      last_name: {\n        type: DataTypes.STRING,\n        defaultValue: null,\n        allowNull: true,\n      },\n      encrypted_ssn: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      encrypted_ssn_salt: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      encrypted_ssn_iv: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      birthdate: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      address: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      unit: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      city: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      state: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      zip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      credit_reporting_enabled: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: true,\n      },\n      disabled_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n        defaultValue: null,\n      },\n      last_enabled_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n        defaultValue: null,\n      },\n      ssn: {\n        type: DataTypes.VIRTUAL,\n        get() {\n          if (\n            !this ||\n            !this.encrypted_ssn ||\n            !this.encrypted_ssn_iv ||\n            !this.encrypted_ssn_salt\n          ) {\n            return null;\n          }\n          try {\n            return decryptWithSaltAndIV(\n              this.encrypted_ssn,\n              this.encrypted_ssn_iv,\n              this.encrypted_ssn_salt,\n            );\n          } catch (err) {\n            return null;\n          }\n        },\n        set(value) {\n          if (!value) {\n            this.setDataValue('encrypted_ssn', null);\n            this.setDataValue('encrypted_ssn_iv', null);\n            this.setDataValue('encrypted_ssn_salt', null);\n            return;\n          }\n          const enc = encryptWithSaltAndIV(value);\n          this.setDataValue('encrypted_ssn', enc.encrypted);\n          this.setDataValue('encrypted_ssn_iv', enc.iv);\n          this.setDataValue('encrypted_ssn_salt', enc.salt);\n        },\n      },\n      audit_actions: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: null,\n      },\n    },\n    {\n      tableName: 'renter_credit_reporting_info',\n      timestamps: true,\n      underscored: true,\n    },\n  );\n  RenterCreditReportingInfo.associate = (models) => {\n    RenterCreditReportingInfo.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n  };\n  return RenterCreditReportingInfo;\n};\n",
  "renter_insurance_quotes": "'use strict';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const RenterInsuranceQuotes = sequelize.define(\n    'renter_insurance_quotes',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      plan_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      quote_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      mandatory_insurance_requirement: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      insurance_claims: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      claim_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      animal_injury: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      is_mobile_manufactured: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      dwelling_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      phone: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      roommate_first_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      roommate_last_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      personal_property: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      deductible: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      earthquake_coverage: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      water_backup: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      identity_fraud: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      replacement_cost: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      start_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      annual_schedule: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      monthly_schedule: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n  RenterInsuranceQuotes.associate = (models) => {\n    RenterInsuranceQuotes.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    RenterInsuranceQuotes.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n  };\n  RenterInsuranceQuotes.prototype.clear = function clear() {\n    this.carrier = null;\n    this.liability_amount = null;\n    this.marketing_fee = null;\n    this.proof_url = null;\n    this.marketing_fee = null;\n    this.premium_received = null;\n    this.policy_canceled_at = null;\n    this.policy_end_at = null;\n    this.policy_start_at = null;\n    this.policy_holder = null;\n    this.policy_address = null;\n  };\n  return RenterInsuranceQuotes;\n};\n",
  "renter_insurances": "'use strict';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const RenterInsurances = sequelize.define(\n    'renter_insurances',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        unique: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      policy_address: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      policy_holder: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      policy_start_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      policy_end_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      policy_canceled_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      premium_received: {\n        type: DataTypes.DOUBLE,\n        allowNull: true,\n      },\n      marketing_fee: {\n        type: DataTypes.DOUBLE,\n        allowNull: true,\n      },\n      liability_amount: {\n        type: DataTypes.DOUBLE,\n        allowNull: true,\n      },\n      carrier: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      proof_url: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      events: {\n        type: DataTypes.JSONB,\n        allowNull: false,\n        defaultValue: [],\n      },\n      policy_expired_notification_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      policy_canceled_notification_sent_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      agreement_id: {\n        // New API\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      policy_number: {\n        // New API\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      status_code: {\n        // New API\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      details: {\n        // New API\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      account_id: {\n        // New API\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      renter_insurance_quote_id: {\n        // New API\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renter_insurance_quotes',\n          key: 'id',\n        },\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n  RenterInsurances.associate = (models) => {\n    RenterInsurances.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    RenterInsurances.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n    RenterInsurances.belongsTo(models.renter_insurance_quotes, {\n      foreignKey: 'renter_insurance_quote_id',\n      targetKey: 'id',\n    });\n  };\n  RenterInsurances.prototype.clear = function clear() {\n    this.carrier = null;\n    this.liability_amount = null;\n    this.marketing_fee = null;\n    this.proof_url = null;\n    this.marketing_fee = null;\n    this.premium_received = null;\n    this.policy_canceled_at = null;\n    this.policy_end_at = null;\n    this.policy_start_at = null;\n    this.policy_holder = null;\n    this.policy_address = null;\n  };\n  return RenterInsurances;\n};\n",
  "renter_payments": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'renter_payments',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      stripe_subscription_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'stripe_subscriptions',\n          key: 'id',\n        },\n      },\n      charge_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      payment_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      source: {\n        type: DataTypes.JSONB,\n        defaultValue: {},\n      },\n      metadata: {\n        type: DataTypes.JSONB,\n        defaultValue: {},\n      },\n      amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      token: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'renter_payments',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.stripe_subscriptions, {\n      foreignKey: 'stripe_subscription_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "renters": "'use strict';\n\nimport config from '../../config';\nimport {\n  isNewMessagingEnabled,\n  onRenterUpdate,\n} from '../../services/cometchat.service';\nimport getRandomProfileColors from '../../utils/getRandomProfileColors';\nimport { clearMask } from '../../utils/utilities';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const Renters = sequelize.define(\n    'renters',\n    {\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        defaultValue: '',\n        set(emailValue) {\n          this.setDataValue(\n            'email',\n            emailValue ? emailValue.toLowerCase().trim() : emailValue,\n          );\n        },\n      },\n\n      encrypted_password: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        defaultValue: '',\n      },\n      reset_password_token: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      reset_password_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      sign_in_count: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      sign_in_attempts: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n      last_login_attempt: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      last_active: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      last_active_ip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      last_active_city: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      confirmation_token: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      confirmed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      confirmation_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      unconfirmed_email: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        set(emailValue) {\n          this.setDataValue(\n            'unconfirmed_email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      employment_status: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      income: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      income_frequency: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      first_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      middle_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      last_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      telephone: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        set(telephoneValue) {\n          this.setDataValue('telephone', clearMask(telephoneValue));\n        },\n      },\n      telephone_type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      profile_pic: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      emergency_contact: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      renter_notes: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: [],\n      },\n      activity: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      agreed_tos_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      customer_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        unique: true,\n      },\n      settings: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: () => ({\n          profile_colors: getRandomProfileColors(),\n        }),\n      },\n      transunion_shareable_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      reset_auth_time: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      deleted_by: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      exclude_stripe_id: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      admin_requested_stripe_id: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      payments_restricted: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      payouts_paused: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      social_signup: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        defaultValue: '',\n      },\n      send_welcome_after_owner_is_approved: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: false,\n      },\n      credit_reporting_setup_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      setterMethods: {},\n    },\n  );\n  Renters.associate = (models) => {\n    Renters.hasMany(models.renter_insurances, {\n      foreignKey: 'renter_id',\n      sourceKey: 'id',\n    });\n    Renters.hasMany(models.check_ins, {\n      foreignKey: 'renter_id',\n      sourceKey: 'id',\n    });\n    Renters.hasMany(models.leads, {\n      foreignKey: 'renter_id',\n      sourceKey: 'id',\n    });\n    Renters.hasMany(models.conversations, {\n      foreignKey: 'renter_id',\n      sourceKey: 'id',\n    });\n    Renters.hasMany(models.maintenance_requests, {\n      foreignKey: 'renter_id',\n      sourceKey: 'id',\n    });\n    Renters.hasMany(models.maintenance_requests, {\n      foreignKey: 'requester_id',\n      sourceKey: 'id',\n    });\n    Renters.hasMany(models.payments, {\n      foreignKey: 'renter_id',\n      sourceKey: 'id',\n    });\n    Renters.hasMany(models.rent_payments, {\n      foreignKey: 'renter_id',\n      sourceKey: 'id',\n    });\n    Renters.hasMany(models.contact_changes, {\n      foreignKey: 'renter_id',\n      sourceKey: 'id',\n    });\n    Renters.hasMany(models.rental_requests, {\n      foreignKey: 'renter_id',\n      sourceKey: 'id',\n    });\n    Renters.hasMany(models.signature_request_signers, {\n      foreignKey: 'renter_id',\n      sourceKey: 'id',\n    });\n    Renters.hasMany(models.user_payment_methods, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    Renters.hasOne(models.renter_credit_reporting_info, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    Renters.hasOne(models.stripe_identity_verifications, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    Renters.hasMany(models.plaid_verifications, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    Renters.belongsToMany(models.leases, {\n      through: 'leases_renters',\n      foreignKey: 'renter_id',\n    });\n    Renters.hasMany(models.leases_renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n    Renters.belongsToMany(models.showings, {\n      through: 'showings_renters',\n      foreignKey: 'renter_id',\n    });\n    /**\n     * I cannot add this because sequelize fails. I cannot undertand why this happens since we do just the same\n     * for leases_renters, but with showings_renters it fails.\n     */\n    // Renters.hasMany(models.showings_renters, {\n    //   foreignKey: 'renter_id',\n    //   targetKey: 'id',\n    // });\n  };\n  Renters.prototype.getEmploymentStatus = function getEmploymentStatus(\n    camelCase,\n  ) {\n    switch (this.employment_status) {\n      case 0:\n        return camelCase ? 'Employed' : 'employed';\n      case 1:\n        return camelCase ? 'NotEmployed' : 'not_employed';\n      case 2:\n        return camelCase ? 'SelfEmployed' : 'self_employed';\n      case 3:\n        return camelCase ? 'Student' : 'Student';\n      case 4:\n        return camelCase ? 'Retired' : 'Retired';\n      default:\n        return '';\n    }\n  };\n  Renters.prototype.getIncomeFrequency = function getIncomeFrequency(\n    camelCase,\n  ) {\n    switch (this.income_frequency) {\n      case 0:\n        return camelCase ? 'Monthly' : 'monthly';\n      case 1:\n        return camelCase ? 'Annual' : 'annual';\n      default:\n        return '';\n    }\n  };\n  Renters.addHook('beforeCreate', (renter) => {\n    // Only for dev and stable, we reject all signups that are not using @turbotenant.com emails\n    if (\n      !config.isProd &&\n      !config.isTestMode &&\n      renter.email &&\n      !renter.email.match(/.+@(turbotenant|tt)\\.com/g)\n    ) {\n      return Promise.reject(\"Can't create renter outside of production.\");\n    }\n  });\n  Renters.addHook('afterUpdate', async (renter) => {\n    if (config.isTestMode || !isNewMessagingEnabled()) return;\n    await onRenterUpdate(renter);\n  });\n  return Renters;\n};\n",
  "residences": "module.exports = (sequelize, DataTypes) => {\n  const Residences = sequelize.define(\n    'residences',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      current: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n        defaultValue: false,\n      },\n      address_1: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      address_2: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      unit: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      city: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      state: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      zip: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      tenancy_type: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      landlord_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      landlord_phone: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      landlord_email: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        set(emailValue) {\n          this.setDataValue(\n            'landlord_email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      rental_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      reason_for_moving: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      start_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      end_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      reference_email_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      monthly_payment: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: false,\n      underscored: true,\n      tableName: 'residences',\n    },\n  );\n  Residences.associate = (models) => {\n    Residences.belongsTo(models.rental_requests, {\n      foreignKey: 'rental_request_id',\n      targetKey: 'id',\n    });\n    Residences.hasOne(models.landlord_references, {\n      foreignKey: 'residence_id',\n      sourceKey: 'id',\n    });\n  };\n  return Residences;\n};\n",
  "shortlinks": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'shortlinks',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      shortlink: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: true,\n      },\n      real_path: {\n        type: DataTypes.TEXT,\n        allowNull: false,\n      },\n      expires_on: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: false,\n      underscored: true,\n      tableName: 'shortlinks',\n    },\n  );\n  return model;\n};\n",
  "showing_availabilities": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'showing_availabilities',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      instructions: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'showing_availabilities',\n    },\n  );\n\n  model.associate = (models) => {\n    model.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      sourceKey: 'id',\n    });\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    model.hasMany(models.showing_availability_slots, {\n      foreignKey: 'availability_id',\n      targetKey: 'id',\n    });\n    model.hasMany(models.showings, {\n      foreignKey: 'availability_id',\n      targetKey: 'id',\n    });\n  };\n\n  return model;\n};\n",
  "showing_availability_slots": "import ShowingTypeEnum from '../../constants/showings/ShowingTypeEnum';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'showing_availability_slots',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      availability_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'showing_availabilities',\n          key: 'id',\n        },\n      },\n      availability_type: {\n        type: DataTypes.ENUM(Object.keys(ShowingTypeEnum)),\n        allowNull: false,\n      },\n      start_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      end_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'showing_availability_slots',\n    },\n  );\n\n  model.associate = (models) => {\n    model.belongsTo(models.showing_availabilities, {\n      foreignKey: 'availability_id',\n      sourceKey: 'id',\n    });\n  };\n\n  return model;\n};\n",
  "showings": "import ShowingTypeEnum from '../../constants/showings/ShowingTypeEnum';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'showings',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      showing_type: {\n        type: DataTypes.ENUM(Object.keys(ShowingTypeEnum)),\n        allowNull: false,\n      },\n      availability_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'showing_availabilities',\n          key: 'id',\n        },\n      },\n      metadata: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: {},\n      },\n      start_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      end_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      canceled_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'showings',\n    },\n  );\n\n  model.associate = (models) => {\n    model.belongsTo(models.showing_availabilities, {\n      foreignKey: 'availability_id',\n      sourceKey: 'id',\n    });\n    model.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      sourceKey: 'id',\n    });\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      sourceKey: 'id',\n    });\n    model.belongsToMany(models.renters, {\n      through: 'showings_renters',\n      foreignKey: 'showing_id',\n    });\n    model.hasMany(models.showings_renters, {\n      foreignKey: 'showing_id',\n      targetKey: 'id',\n    });\n  };\n\n  return model;\n};\n",
  "showings_renters": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'showings_renters',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      showing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'showings',\n          key: 'id',\n        },\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      attending_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      canceled_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'showings_renters',\n    },\n  );\n\n  model.associate = (models) => {\n    model.belongsTo(models.showings, {\n      foreignKey: 'showing_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n  };\n\n  return model;\n};\n",
  "signature_request_signers": "module.exports = function (sequelize, DataTypes) {\n  const SignatureRequestSigners = sequelize.define(\n    'signature_request_signers',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      signature_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        // Seems redundent based on the associations near the end of this file,\n        // but it is used in our endpoint tests.\n        references: {\n          model: 'signature_requests',\n          key: 'id',\n        },\n        unique: 'unique_signature_request',\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        // Seems redundent based on the associations near the end of this file,\n        // but it is used in our endpoint tests.\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        // Seems redundent based on the associations near the end of this file,\n        // but it is used in our endpoint tests.\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      last_reminded_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      reminded_count: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      signer_type: {\n        type: DataTypes.ENUM('OWNER', 'RENTER', 'ADDITIONAL_SIGNER'),\n        allowNull: true,\n      },\n      // The data for all the columns below this comment come from HelloSign\n      signer_email_address: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      signer_name: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      signed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      // status_code comes from HelloSign and can have\n      // one of the statuses below\n      // success, on_hold, signed, awaiting_signature\n      // declined, error_unknown, error_file\n      // error_component_position, error_text_tag\n      // error_text_tag, on_hold_by_requester\n      status_code: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      signature_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        unique: 'unique_signature_request',\n      },\n      last_viewed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'signature_request_signers',\n      indexes: [\n        {\n          unique: true,\n          fields: ['signature_request_id', 'signature_id'],\n        },\n      ],\n    },\n  );\n\n  SignatureRequestSigners.associate = (models) => {\n    SignatureRequestSigners.belongsTo(models.signature_requests, {\n      foreignKey: 'signature_request_id',\n      targetKey: 'id',\n    });\n    SignatureRequestSigners.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    SignatureRequestSigners.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n  };\n\n  return SignatureRequestSigners;\n};\n",
  "signature_requests": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'signature_requests',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      lease_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'leases',\n          key: 'id',\n        },\n      },\n      landlord_payment_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'landlord_payments',\n          key: 'id',\n        },\n      },\n      lease_agreement_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'lease_agreements',\n          key: 'id',\n        },\n        unique: true,\n      },\n      wizard_document_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'wizard_documents',\n          key: 'id',\n        },\n        unique: true,\n      },\n      claim_url: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      /*\n      this field is not a reference to this table itself. It is an id\n      that HelloSign sends to us and we put in this field\n      */\n      signature_request_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      title: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      subject: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      message: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      is_complete: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      is_declined: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      has_error: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      downloaded: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      reminder_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      events: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: [],\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      canceled_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      last_attempt_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n        defaultValue: null,\n      },\n      download_attempts: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        defaultValue: 0,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'signature_requests',\n    },\n  );\n  model.associate = (models) => {\n    model.hasMany(models.lease_documents, {\n      foreignKey: 'signature_request_id',\n      sourceKey: 'id',\n    });\n    model.belongsTo(models.lease_agreements, {\n      foreignKey: 'lease_agreement_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.leases, {\n      foreignKey: 'lease_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.landlord_payments, {\n      foreignKey: 'landlord_payment_id',\n      targetKey: 'id',\n    });\n    model.hasMany(models.signature_request_signers, {\n      foreignKey: 'signature_request_id',\n      sourceKey: 'id',\n      as: 'signers',\n    });\n    model.belongsTo(models.wizard_documents, {\n      foreignKey: 'wizard_document_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "stripe_external_accounts": "module.exports = function (sequelize, DataTypes) {\n  const StripeExternalAccounts = sequelize.define(\n    'stripe_external_accounts',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      stripe_identity_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'stripe_identities',\n          key: 'id',\n        },\n      },\n      stripe_account_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      stripe_external_account_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      type: {\n        type: DataTypes.ENUM('BANK_ACCOUNT', 'CARD'),\n        allowNull: true,\n      },\n      external_account_info: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      bank_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      last4: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      status: {\n        type: DataTypes.ENUM('NEW', 'ERRORED', 'VERIFIED'),\n        allowNull: true,\n      },\n      default_for_currency: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: true,\n      },\n      nickname: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      currency: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      account_holder: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'stripe_external_accounts',\n      indexes: [\n        {\n          unique: true,\n          fields: [\n            'stripe_identity_id',\n            'stripe_account_id',\n            'stripe_external_account_id',\n          ],\n        },\n      ],\n    },\n  );\n  StripeExternalAccounts.associate = (models) => {\n    StripeExternalAccounts.belongsTo(models.stripe_identities);\n    StripeExternalAccounts.hasOne(models.payment_requests, {\n      foreignKey: 'destination_id',\n      targetKey: 'id',\n    });\n  };\n  return StripeExternalAccounts;\n};\n",
  "stripe_identities": "module.exports = function (sequelize, DataTypes) {\n  const StripeIdentities = sequelize.define(\n    'stripe_identities',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: null,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      stripe_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        set(emailValue) {\n          this.setDataValue(\n            'email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      business_type: {\n        type: DataTypes.STRING,\n        defaultValue: 'individual',\n      },\n      doing_business_as: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      entity: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      charges_enabled: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      payouts_enabled: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: true,\n      },\n      capabilities: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      requirements: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      future_requirements: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      account_opener_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      account_opener: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      tos_acceptance: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      new_requirements_added_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      requirements_reminder_last_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      address_ssn_tax_requirements_added_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      address_ssn_tax_requirements_reminder_last_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      default: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      created_less_than_90_days: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      last_event_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'stripe_identities',\n    },\n  );\n  StripeIdentities.associate = (models) => {\n    models.stripe_identities.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    models.stripe_identities.hasMany(models.stripe_external_accounts);\n    models.stripe_identities.hasMany(models.stripe_identity_documents);\n  };\n  return StripeIdentities;\n};\n",
  "stripe_identity_documents": "module.exports = function (sequelize, DataTypes) {\n  const StripeIdentities = sequelize.define(\n    'stripe_identity_documents',\n    {\n      id: {\n        type: DataTypes.BIGINT,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      filename: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      type: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      stripe_identity_id: {\n        type: DataTypes.BIGINT,\n        allowNull: true,\n        references: {\n          model: 'stripe_identities',\n          key: 'id',\n        },\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'stripe_identity_documents',\n    },\n  );\n\n  StripeIdentities.associate = (models) => {\n    models.stripe_identity_documents.belongsTo(models.stripe_identities, {\n      foreignKey: 'stripe_identity_id',\n      targetKey: 'id',\n    });\n  };\n\n  return StripeIdentities;\n};\n",
  "stripe_identity_verifications": "module.exports = function (sequelize, DataTypes) {\n  const StripeIdentityVerifications = sequelize.define(\n    'stripe_identity_verifications',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      session_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n      },\n      last_session_status: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      last_stripe_event_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      stripe_verification_report_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      completed: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      last_event_creation_time: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      stripe_id_name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'stripe_identity_verifications',\n    },\n  );\n  StripeIdentityVerifications.associate = (models) => {\n    StripeIdentityVerifications.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      sourceKey: 'id',\n    });\n  };\n  return StripeIdentityVerifications;\n};\n",
  "stripe_payouts": "module.exports = function (sequelize, DataTypes) {\n  const StripePayouts = sequelize.define(\n    'stripe_payouts',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      stripe_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      stripe_account_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      amount: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      arrival_date: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      automatic: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      balance_transaction: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      balance_transaction_data: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      description: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      destination: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      failure_code: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      failure_balance_transaction: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      failure_message: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      metadata: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      status: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      statement_descriptor: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      reversed_by: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      last_event_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'stripe_payouts',\n    },\n  );\n  StripePayouts.associate = (models) => {\n    StripePayouts.hasMany(models.rent_payments, {\n      foreignKey: 'stripe_payout_id',\n      sourceKey: 'id',\n    });\n  };\n  return StripePayouts;\n};\n",
  "stripe_subscriptions": "module.exports = function (sequelize, DataTypes) {\n  const StripeSubscriptions = sequelize.define(\n    'stripe_subscriptions',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n      },\n      subscription_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      subscription_info: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      upcoming_invoice: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      subscription_short_code: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      is_addon: {\n        type: DataTypes.BOOLEAN,\n        allowNull: false,\n        defaultValue: false,\n      },\n      parent_subscription_id: {\n        // References the parent subscription if this subscription is an addon\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        defaultValue: null,\n        references: {\n          model: 'stripe_subscriptions',\n          key: 'id',\n        },\n      },\n      product_line: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      status: {\n        type: DataTypes.ENUM(\n          'ACTIVE',\n          'CANCELED',\n          'INCOMPLETE',\n          'INCOMPLETE_EXPIRED',\n          'PAST_DUE',\n          'UNPAID',\n          'TRIALING',\n        ),\n        allowNull: true,\n      },\n      current_period_start: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      current_period_end: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      enabled_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      canceled_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      cancel_reason: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'stripe_subscriptions',\n    },\n  );\n  StripeSubscriptions.associate = (models) => {\n    StripeSubscriptions.hasMany(models.landlord_payments, {\n      foreignKey: 'stripe_subscription_id',\n      sourceKey: 'id',\n    });\n    StripeSubscriptions.belongsTo(models.stripe_subscriptions, {\n      foreignKey: 'parent_subscription_id',\n      as: 'parent_subscription',\n      targetKey: 'id',\n    });\n    StripeSubscriptions.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    StripeSubscriptions.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n  };\n  return StripeSubscriptions;\n};\n",
  "syndication_histories": "'use strict';\n\nmodule.exports = (sequelize, DataTypes) => {\n  const SyndicationHistories = sequelize.define(\n    'syndication_histories',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      action: {\n        type: DataTypes.STRING,\n      },\n      action_type: {\n        type: DataTypes.STRING,\n      },\n      status: {\n        type: DataTypes.STRING,\n      },\n      user: {\n        type: DataTypes.STRING,\n      },\n      note: {\n        type: DataTypes.TEXT,\n      },\n      automatic_decision: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      admin: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n  SyndicationHistories.associate = (models) => {\n    SyndicationHistories.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n    models.listings.hasMany(SyndicationHistories, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n  };\n  return SyndicationHistories;\n};\n",
  "trusted_devices": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'trusted_devices',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n        unique: 'unique-owner-device',\n      },\n      device_id: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: 'unique-owner-device',\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'trusted_devices',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "unsubscribe_groups": "module.exports = (sequelize, DataTypes) =>\n  sequelize.define(\n    'unsubscribe_groups',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: false,\n        unique: true,\n        set(emailValue) {\n          this.setDataValue(\n            'email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      // NOTE: REMOVED\n      landlord_expiration_reminders: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      // NOTE: REMOVED\n      landlord_product_updates: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      renters_rental_notifications: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      renters_from_turbotenant: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      renters_messages_from_landlord: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_messages_from_renters: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_new_leads: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_leases: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_properties: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_applicants: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_check_ins_maintenance: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_promotions: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_platform_updates: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_thekey_weekly_newsletter: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_webinars_and_networking_events: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      landlord_feedback_opportunities: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'unsubscribe_groups',\n    },\n  );\n",
  "user_payment_methods": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'user_payment_methods',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      payment_method_id: {\n        type: DataTypes.INTEGER,\n        references: {\n          model: 'payment_methods',\n          key: 'id',\n        },\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n        allowNull: true,\n      },\n      renter_id: {\n        type: DataTypes.INTEGER,\n        references: {\n          model: 'renters',\n          key: 'id',\n        },\n        allowNull: true,\n      },\n\n      is_default: {\n        type: DataTypes.BOOLEAN,\n        defaultValue: false,\n      },\n      used_for_rent_payments: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      metadata: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: {},\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'user_payment_methods',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.payment_methods, {\n      foreignKey: 'payment_method_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    model.belongsTo(models.renters, {\n      foreignKey: 'renter_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "vehicles": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'vehicles',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      make: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      name: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      color: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      year: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n      registration: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      rental_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'rental_requests',\n          key: 'id',\n        },\n      },\n    },\n    {\n      timestamps: false,\n      tableName: 'vehicles',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.rental_requests, {\n      foreignKey: 'rental_request_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "verification_documents": "import VERIFICATION_DOCUMENT_TYPE from '../../constants/verification_documents/type';\n\nmodule.exports = function (sequelize, DataTypes) {\n  const VerificationDocuments = sequelize.define(\n    'verification_documents',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      owner_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'owners',\n          key: 'id',\n        },\n      },\n      listing_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'listings',\n          key: 'id',\n        },\n      },\n      type: {\n        type: DataTypes.ENUM(Object.keys(VERIFICATION_DOCUMENT_TYPE)),\n        allowNull: true,\n      },\n      title: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      path: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      file_type: {\n        type: DataTypes.ENUM(\n          'csv',\n          'xlsx',\n          'xls',\n          'jpg',\n          'jpeg',\n          'gif',\n          'bmp',\n          'png',\n          'pdf',\n          'docx',\n          'doc',\n          'mp3',\n          'webm',\n          'mp4',\n          'wexbim',\n          'zip',\n          'rar',\n          'txt',\n        ),\n        allowNull: true,\n      },\n      rotation: {\n        type: DataTypes.INTEGER,\n        defaultValue: 0,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      stripe_upload_status: {\n        type: DataTypes.ENUM('PENDING', 'APPROVED'),\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'verification_documents',\n    },\n  );\n  VerificationDocuments.associate = (models) => {\n    VerificationDocuments.belongsTo(models.owners, {\n      foreignKey: 'owner_id',\n      targetKey: 'id',\n    });\n    VerificationDocuments.belongsTo(models.listings, {\n      foreignKey: 'listing_id',\n      targetKey: 'id',\n    });\n  };\n  return VerificationDocuments;\n};\n",
  "wizard_documents": "module.exports = function (sequelize, DataTypes) {\n  const WizardDocuments = sequelize.define(\n    'wizard_documents',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      lease_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'leases',\n          key: 'id',\n        },\n      },\n      landlord_payment_id: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n        references: {\n          model: 'landlord_payments',\n          key: 'id',\n        },\n      },\n      completed_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      type: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      form: {\n        type: DataTypes.JSON,\n        defaultValue: {},\n      },\n      all_fields_completed: {\n        type: DataTypes.DATE,\n        allowNull: true,\n        defaultValue: null,\n      },\n      completion_reminder_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n        defaultValue: null,\n      },\n      purchase_reminder_sent_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n        defaultValue: null,\n      },\n      deleted_at: {\n        type: DataTypes.DATE,\n        defaultValue: null,\n        allowNull: true,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n    },\n  );\n\n  WizardDocuments.associate = (models) => {\n    WizardDocuments.belongsTo(models.leases, {\n      foreignKey: 'lease_id',\n      targetKey: 'id',\n    });\n    WizardDocuments.belongsTo(models.landlord_payments, {\n      foreignKey: 'landlord_payment_id',\n      targetKey: 'id',\n    });\n    WizardDocuments.hasMany(models.lease_documents, {\n      foreignKey: 'lease_agreement_id',\n      sourceKey: 'id',\n    });\n    WizardDocuments.hasOne(models.signature_requests, {\n      foreignKey: 'lease_agreement_id',\n      targetKey: 'id',\n    });\n  };\n\n  return WizardDocuments;\n};\n",
  "work_orders": "module.exports = function (sequelize, DataTypes) {\n  const model = sequelize.define(\n    'work_orders',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      message: {\n        type: DataTypes.TEXT,\n        allowNull: true,\n      },\n      email: {\n        type: DataTypes.STRING,\n        allowNull: true,\n        set(emailValue) {\n          this.setDataValue(\n            'email',\n            emailValue ? emailValue.toLowerCase() : emailValue,\n          );\n        },\n      },\n      maintenance_request_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'maintenance_requests',\n          key: 'id',\n        },\n      },\n      type: {\n        type: DataTypes.ENUM('MANUAL', 'LULA'),\n        allowNull: true,\n      },\n      original_payload: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      partner_data: {\n        // Latest information from Lula on the work order\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      remote_work_order_id: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'work_orders',\n    },\n  );\n  model.associate = (models) => {\n    model.belongsTo(models.maintenance_requests, {\n      foreignKey: 'maintenance_request_id',\n      targetKey: 'id',\n    });\n  };\n  return model;\n};\n",
  "work_orders_maintenance_vendors": "module.exports = function (sequelize, DataTypes) {\n  const WorkOrdersMaintenanceVendors = sequelize.define(\n    'work_orders_maintenance_vendors',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      maintenance_vendor_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'maintenance_vendors',\n          key: 'id',\n        },\n      },\n      work_order_id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        references: {\n          model: 'work_orders',\n          key: 'id',\n        },\n      },\n      feedback: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n    },\n    {\n      timestamps: true,\n      underscored: true,\n      tableName: 'work_orders_maintenance_vendors',\n    },\n  );\n  WorkOrdersMaintenanceVendors.associate = (models) => {\n    WorkOrdersMaintenanceVendors.belongsTo(models.work_orders, {\n      foreignKey: 'work_order_id',\n      targetKey: 'id',\n    });\n    WorkOrdersMaintenanceVendors.belongsTo(models.maintenance_vendors, {\n      foreignKey: 'maintenance_vendor_id',\n      targetKey: 'id',\n    });\n  };\n  return WorkOrdersMaintenanceVendors;\n};\n",
  "worker_jobs": "module.exports = function (sequelize, DataTypes) {\n  return sequelize.define(\n    'worker_jobs',\n    {\n      id: {\n        type: DataTypes.INTEGER,\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n      },\n      service_name: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      method_name: {\n        type: DataTypes.STRING,\n        allowNull: false,\n      },\n      description: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      payload: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n        defaultValue: [],\n      },\n      start_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      started_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      expires_at: {\n        type: DataTypes.DATE,\n        allowNull: true,\n      },\n      success: {\n        type: DataTypes.BOOLEAN,\n        allowNull: true,\n      },\n      error_message: {\n        type: DataTypes.STRING,\n        allowNull: true,\n      },\n      result: {\n        type: DataTypes.JSONB,\n        allowNull: true,\n      },\n      created_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      updated_at: {\n        type: DataTypes.DATE,\n        allowNull: false,\n      },\n      priority: {\n        type: DataTypes.INTEGER,\n        allowNull: true,\n      },\n    },\n    {\n      timestamps: true,\n      tableName: 'worker_jobs',\n    },\n  );\n};\n"
}